
import ForecastHandler, ExpenseForecast
import BudgetSet, AccountSet, MemoRuleSet
import MilestoneSet, MemoMilestone, AccountMilestone

import CompositeMilestone
import MilestoneSet
import ExpenseForecast
import pandas as pd
import logging
import datetime
#import logging_tree
import profile
from log_methods import setup_logger


logger = setup_logger('scratch', './log/scratch.log', level=logging.DEBUG)

def compound_loan_A():
    A = AccountSet.AccountSet([])
    A.createAccount("test loan A",balance=1100,min_balance=0,max_balance=1100,account_type="loan",
                    billing_start_date_YYYYMMDD="20240101",interest_type="compound",apr=0.1,interest_cadence="monthly",
                    minimum_payment=50,
                    principal_balance=1000,accrued_interest=100)
    return A.accounts

def compound_loan_A_no_interest():
    A = AccountSet.AccountSet([])
    A.createAccount("test loan A",balance=1000,min_balance=0,max_balance=1100,account_type="loan",
                    billing_start_date_YYYYMMDD="20240101",interest_type="compound",apr=0.1,interest_cadence="monthly",
                    minimum_payment=50,
                    principal_balance=1000,accrued_interest=0)
    return A.accounts

def compound_loan_B():
    A = AccountSet.AccountSet([])
    A.createAccount("test loan B", balance=1600, min_balance=0, max_balance=1600, account_type="loan",
                    billing_start_date_YYYYMMDD="20240101", interest_type="compound", apr=0.01,
                    interest_cadence="monthly",
                    minimum_payment=50,
                    principal_balance=1500, accrued_interest=100)
    return A.accounts

def compound_loan_B_no_interest():
    A = AccountSet.AccountSet([])
    A.createAccount("test loan B", balance=1500, min_balance=0, max_balance=1600, account_type="loan",
                    billing_start_date_YYYYMMDD="20240101", interest_type="compound", apr=0.01,
                    interest_cadence="monthly",
                    minimum_payment=50,
                    principal_balance=1500, accrued_interest=0)
    return A.accounts

def compound_loan_C():
    A = AccountSet.AccountSet([])
    A.createAccount("test loan C", balance=2600, min_balance=0, max_balance=2600, account_type="loan",
                    billing_start_date_YYYYMMDD="20240101", interest_type="compound", apr=0.05,
                    interest_cadence="monthly",
                    minimum_payment=50,
                    principal_balance=2500, accrued_interest=100)
    return A.accounts

def compound_loan_C_no_interest():
    A = AccountSet.AccountSet([])
    A.createAccount("test loan C", balance=2500, min_balance=0, max_balance=2600, account_type="loan",
                    billing_start_date_YYYYMMDD="20240101", interest_type="compound", apr=0.05,
                    interest_cadence="monthly",
                    minimum_payment=50,
                    principal_balance=2500, accrued_interest=0)
    return A.accounts

def checking():
    A = AccountSet.AccountSet([])
    A.createAccount("test checking", balance=10000, min_balance=0, max_balance=10000, account_type="checking")
    return A.accounts

def cc(curr_bal,prev_bal,apr,bsd):
    A = AccountSet.AccountSet([])
    A.createAccount('test cc',curr_bal,0,20000,'credit',bsd,'compound',apr,'monthly',40,prev_bal)
    return A.accounts


def one_loan__p_1000__i_100__apr_01():
    return AccountSet.AccountSet(checking()+compound_loan_A())

def two_loans__p_1000__i_100__apr_01___p_1500__i_100__apr_001():
    return AccountSet.AccountSet(checking() + compound_loan_A() + compound_loan_B())

def three_loans__p_1000__i_100__apr_01___p_1500__i_100__apr_001___p_2500__i_100__apr_005():
    return AccountSet.AccountSet(checking() + compound_loan_A() + compound_loan_B() + compound_loan_C())

# def one_loan__p_1000__i_000__apr_01():
#     return AccountSet.AccountSet(checking()+compound_loan_A_no_interest())
#
# def two_loans__p_1000__i_000__apr_01___p_1500__i_000__apr_001():
#     return AccountSet.AccountSet(checking() + compound_loan_A_no_interest() + compound_loan_B_no_interest())

def three_loans__p_1000__i_000__apr_01___p_1500__i_000__apr_001___p_2500__i_000__apr_005():
    return AccountSet.AccountSet(checking() + compound_loan_A_no_interest() + compound_loan_B_no_interest() + compound_loan_C_no_interest())

from log_methods import log_in_color_with_breadcrumbs

if __name__ == '__main__':

    # I want account milestones, memo milestones, composite milestones with min, non-boundary and max values that are diff for each

    rerun = True

    start_date_YYYYMMDD = '20240101'
    end_date_YYYYMMDD = '20240205'

    A = AccountSet.AccountSet([])
    A.createAccount('Checking', 6000, 0, 999999, 'checking')
    #A.createAccount('Credit', 1000, 0, 999999, 'credit', '20240103', 'compound', 0.24, 'monthly', 60, 1000)
    A.createAccount('Loan A', 5100, 0, 999999, 'loan', '20230103', 'simple', 0.1, 'daily', 50, None, 5000, 100)
    #A.createAccount('Loan B', 1100, 0, 999999, 'loan', '20230103', 'simple', 0.05, 'daily', 50, None, 1000, 100)
    #A.createAccount('Loan C', 1100, 0, 999999, 'loan', '20230103', 'simple', 0.01, 'daily', 50, None, 1000, 100)

    B = BudgetSet.BudgetSet([])
    #B.addBudgetItem('20240120', '20240120', 1, 'once', 10_000, 'income', False, False)
    # B.addBudgetItem('20240201', '20240201', 1, 'once', 10_000, 'income 2', False, False)
    #B.addBudgetItem('20240117', '20240117', 2, 'once', 10_000, '10k txn', True, False)
    #B.addBudgetItem('20240103', end_date_YYYYMMDD, 6, 'semiweekly', 1500, 'additional cc payment', False, True)
    B.addBudgetItem('20240103', end_date_YYYYMMDD, 7, 'semiweekly', 1500, 'additional loan payment', False, True)

    M = MemoRuleSet.MemoRuleSet([])
    M.addMemoRule('.*income.*', None, 'Checking', 1)
    #M.addMemoRule('10k txn', 'Checking', None, 2)
    #M.addMemoRule('additional cc payment', 'Checking', 'Credit', 6)
    M.addMemoRule('additional loan payment', 'Checking', 'ALL_LOANS', 7)

    #A1 = AccountMilestone.AccountMilestone('Checking 10k', 'Checking', 10_000, 999_999)
    # A2 = AccountMilestone.AccountMilestone('Loan A 1000', 'Loan A', 1000, 1000)
    # A3 = AccountMilestone.AccountMilestone('Loan B 0', 'Loan B', 0, 0)
    # A4 = AccountMilestone.AccountMilestone('Loan B 1000', 'Loan B', 1000, 1000)
    # A5 = AccountMilestone.AccountMilestone('Loan C 0', 'Loan C', 0, 0)
    # A6 = AccountMilestone.AccountMilestone('Loan C 1000', 'Loan C', 1000, 1000)

    #M1 = MemoMilestone.MemoMilestone('big purchase 1', '.*10k txn.*')
    # M2 = MemoMilestone.MemoMilestone('big purchase 2', '.*big purchase 2.*')

    #CM1 = CompositeMilestone.CompositeMilestone('All 1k', [A1], [M1])
    # CM3 = CompositeMilestone.CompositeMilestone('All 1k and both purchases', [A1, A2, A3], [M1, M2])

    MS = MilestoneSet.MilestoneSet(A, B, [], [], [])
    # MS = MilestoneSet.MilestoneSet(A, B, [A1, A2, A3, A4, A5, A6], [], [CM1])

    if rerun:

        E1 = ExpenseForecast.ExpenseForecast(A,
                                            B,
                                            M,
                                            start_date_YYYYMMDD,
                                            end_date_YYYYMMDD,
                                            MS)
        E1.runForecast()
    else:
        E1 = ExpenseForecast.initialize_from_json_file('./out/Forecast__032132__2024_01_07__01_00_53.json')

    E1.appendSummaryLines()
    F = ForecastHandler.ForecastHandler()
    F.generateHTMLReport(E1, './out/')

    #E2 = ExpenseForecast.initialize_from_json_file('./out/Forecast__034121__2024_01_07__02_19_43.json')
    #E2.appendSummaryLines()

    #let's redefine and re-evaluate milestones
    # A1 = AccountMilestone.AccountMilestone('Checking 10k', 'Checking', 10_000, 999_999)
    # M1 = MemoMilestone.MemoMilestone('big purchase 1', '.*10k txn.*')
    # CM1 = CompositeMilestone.CompositeMilestone('Checking 10k and big purchase', [A1], [M1])
    #
    #
    # #to test account milestone calculation
    # #A_cc_test = AccountMilestone.AccountMilestone('Credit X', 'Credit', 10_000, 999_999) #need a new forecast to test cc
    # A_loan_test = AccountMilestone.AccountMilestone('Loan A 197.37 on 1/20', 'Loan A', 0, 197.37) #196.72	0.65 ; on 1/20
    # MS = MilestoneSet.MilestoneSet(A, B, [A1, A_loan_test], [M1], [CM1])
    #
    # E1.milestone_set = MS
    # E2.milestone_set = MS
    #
    # E1.evaluateMilestones()
    # E2.evaluateMilestones()
    #
    # F = ForecastHandler.ForecastHandler()
    # F.generateHTMLReport(E1,'./out/')
    # F.generateHTMLReport(E2, './out/')
    #
    # F.generateCompareTwoForecastsHTMLReport(E1,E2,'./out/')

    # log_color_stack = []
    # log_in_color_with_breadcrumbs(logger, 'red','debug','red log message')
    # log_color_stack.append('red')
    #
    # log_in_color_with_breadcrumbs(logger, 'yellow', 'debug', 'yellow log message',1,log_color_stack)
    # log_color_stack.append('yellow')
    #
    # log_in_color_with_breadcrumbs(logger, 'green', 'debug', 'green log message',2,log_color_stack)
    # log_color_stack.append('green')
    #
    # log_in_color_with_breadcrumbs(logger, 'magenta', 'debug', 'magenta log message',3,log_color_stack)
    # log_color_stack.append('magenta')
    #
    # log_in_color_with_breadcrumbs(logger, 'white', 'debug', 'white log message', 4, log_color_stack)
    #
    # log_color_stack.pop()
    # log_in_color_with_breadcrumbs(logger, 'magenta', 'debug', 'magenta log message', 3, log_color_stack)
    #
    # log_in_color_with_breadcrumbs(logger, 'green', 'debug', 'green log message', 2, log_color_stack)
    #
    # log_color_stack.pop()
    # log_in_color_with_breadcrumbs(logger, 'yellow', 'debug', 'yellow log message', 1, log_color_stack)
    #
    # log_color_stack.pop()
    # log_in_color_with_breadcrumbs(logger, 'red', 'debug', 'red log message')

    # start_date_YYYYMMDD = '20000101'
    # end_date_YYYYMMDD = '20000201'
    #
    # account_set = AccountSet.AccountSet([])
    # budget_set = BudgetSet.BudgetSet([])
    # memo_rule_set = MemoRuleSet.MemoRuleSet([])
    #
    # account_set.createAccount(name='Checking',
    #                           balance=5000,
    #                           min_balance=0,
    #                           max_balance=float('Inf'),
    #                           account_type="checking")
    #
    # account_set.createAccount('Loan A', 1100, 0, 9999, 'loan', '20000102', 'simple', 0.1, 'daily', 50, None, 1000,
    #                           100)
    # account_set.createAccount('Loan B', 1100, 0, 9999, 'loan', '20000102', 'simple', 0.05, 'daily', 50, None, 1000,
    #                           100)
    # account_set.createAccount('Loan C', 1100, 0, 9999, 'loan', '20000102', 'simple', 0.01, 'daily', 50, None, 1000,
    #                           100)
    #
    # budget_set.addBudgetItem(start_date_YYYYMMDD='20000102', end_date_YYYYMMDD='20000102', priority=7,
    #                          cadence='once', amount=1900, memo='additional loan payment',
    #                          deferrable=False,
    #                          partial_payment_allowed=True)
    #
    # memo_rule_set.addMemoRule(memo_regex='.*', account_from='Checking', account_to='ALL_LOANS',
    #                           transaction_priority=7)
    #
    # milestone_set = MilestoneSet.MilestoneSet(account_set, budget_set, [], [], [])
    #
    # E = ExpenseForecast.ExpenseForecast(account_set, budget_set, memo_rule_set, start_date_YYYYMMDD,
    #                                     end_date_YYYYMMDD, milestone_set, True)
    # print(datetime.datetime.now())
    # #profile.run('E.runForecast()') #python -m cProfile -s tottime myscript.py
    # E.runForecast() #
    # print(datetime.datetime.now())
    #print(E.forecast_df.to_string())

# 2023-12-28 23:45:35.864182
# 0      Date Checking Loan A: Principal Balance Loan A: Interest Loan B: Principal Balance Loan B: Interest Loan C: Principal Balance Loan C: Interest                                                                                                                                                                                                                                                                                                                                                                                                                                                      Memo
# 0  20000101   5000.0                    1000.0            100.0                    1000.0            100.0                    1000.0            100.0
# 1  20000102   2950.0                     92.62              0.0                    185.25              0.0                    972.57              0.0  Loan A loan min payment ($50.0); Loan B loan min payment ($50.0); Loan C loan min payment ($50.0); Loan A: Principal Balance additional loan payment ($907.38) ; Loan A: Interest additional loan payment ($50.27) ; Loan B: Principal Balance additional loan payment ($814.75) ; Loan B: Interest additional loan payment ($50.14) ; Loan C: Principal Balance additional loan payment ($27.43) ; Loan C: Interest additional loan payment ($50.03) ;
# 2  20000103   2950.0                     92.62             0.03                    185.25             0.03                    972.57             0.03
# 2023-12-28 23:45:50.864258



    #print(E.start_ts)
    #print(E.end_ts)
    #2 minutes 58 seconds w 20000101 -> 20000201



    #methods that need to be broken apart
    #computeOptimalForecast
    #runForecast

    ### primary offenders
    #   8    0.022    0.003   53.759    6.720 ExpenseForecast.py:1624(calculateInterestAccrualsForDay)
    #  28    0.010    0.000   27.895    0.996 ExpenseForecast.py:1897(sync_account_set_w_forecast_day)
    # 2/1    0.005    0.002  103.103  103.103 ExpenseForecast.py:1932(computeOptimalForecast)
    # 8/4    0.006    0.001   59.612   14.903 ExpenseForecast.py:745(executeTransactionsForDay)


#              39983106 function calls (39225674 primitive calls) in 117.460 seconds
#    Ordered by: standard name
#    ncalls  tottime  percall  cumtime  percall filename:li
#         1    0.000    0.000  117.452  117.452 <string>:1(<module>)
#       8/4    0.005    0.001   70.070   17.517 ExpenseForecast.py:1143(executeTransactionsForDay)
#         8    0.023    0.003   54.630    6.829 ExpenseForecast.py:2164(calculateInterestAccrualsForDay)
#         4    0.004    0.001    7.248    1.812 ExpenseForecast.py:2301(executeMinimumPayments)
#        32    0.019    0.001   41.007    1.281 ExpenseForecast.py:2439(sync_account_set_w_forecast_day)
#         2    0.001    0.001    3.410    1.705 ExpenseForecast.py:2478(propagateTransactionsIntoTheFuture)
#         4    0.002    0.000   33.562    8.390 ExpenseForecast.py:2575(overwriteOGSatisficeInterestWhenAdditionalLoanPayment)
#       2/1    0.001    0.000   94.017   94.017 ExpenseForecast.py:2605(assessPotentialOptimizations)
#         2    0.001    0.000   46.280   23.140 ExpenseForecast.py:2708(satisfice)
#       2/1    0.000    0.000  117.437  117.437 ExpenseForecast.py:2763(computeOptimalForecast)
#         1    0.000    0.000  117.452  117.452 ExpenseForecast.py:592(runForecast)
#         1    0.001    0.001    1.966    1.966 ExpenseForecast.py:799(updateBalancesAndMemo)
#         1    0.000    0.000   60.322   60.322 ExpenseForecast.py:825(attemptTransaction)
#         8    0.000    0.000    4.554    0.569 ExpenseForecast.py:856(processConfirmedTransactions)
#       8/4    0.001    0.000   66.142   16.536 ExpenseForecast.py:878(processProposedTransactions)
#         1    0.000    0.000  117.460  117.460 profile:0(E.runForecast())
# 2023-12-30 04:17:08.506821


#          39983106 function calls (39225674 primitive calls) in 117.460 seconds
#
#    Ordered by: standard name
#
#    ncalls  tottime  percall  cumtime  percall filename:lineno(function)
#         1    0.000    0.000    0.000    0.000 :0(S_ISDIR)
#         1    0.000    0.000    0.000    0.000 :0(__build_class__)
#       159    0.001    0.000    0.001    0.000 :0(__deepcopy__)
#      5531    0.006    0.000    0.006    0.000 :0(__getitem__)
#     49442    0.073    0.000    0.073    0.000 :0(__new__)
#        82    0.000    0.000    0.000    0.000 :0(__reduce_ex__)
#    271604    0.330    0.000    0.331    0.000 :0(_abc_instancecheck)
#     60/12    0.000    0.000    0.000    0.000 :0(_abc_subclasscheck)
#     32994    0.034    0.000    0.034    0.000 :0(_filters_mutated)
#         1    0.000    0.000    0.000    0.000 :0(_fix_co_filename)
#       555    0.001    0.000    0.001    0.000 :0(_getframe)
#     16728    0.170    0.000    0.533    0.000 :0(_rebuild_blknos_and_blklocs)
#        50    0.000    0.000    0.000    0.000 :0(_simple_new)
#       166    0.000    0.000    0.000    0.000 :0(abs)
#      2223    0.003    0.000    0.003    0.000 :0(acquire)
#        11    0.000    0.000    0.000    0.000 :0(acquire_lock)
#     82105    0.200    0.000    0.205    0.000 :0(add)
#     35287    0.064    0.000    0.064    0.000 :0(add_index_reference)
# 626608/512172    2.480    0.000   13.890    0.000 :0(all)
#         4    0.000    0.000    0.000    0.000 :0(allocate_lock)
#        24    0.000    0.000    0.000    0.000 :0(and_)
#    130480    0.638    0.000    1.828    0.000 :0(any)
#    770505    1.088    0.000    1.088    0.000 :0(append)
#     11262    0.037    0.000    0.037    0.000 :0(arange)
#      9105    0.044    0.000    0.044    0.000 :0(argsort)
#     43659    0.195    0.000    0.196    0.000 :0(array)
#     21947    0.120    0.000    0.120    0.000 :0(array_equivalent_object)
#       138    0.001    0.000    0.001    0.000 :0(as_unit)
#     24048    0.028    0.000    0.028    0.000 :0(asanyarray)
# 188848/188642    0.315    0.000    0.318    0.000 :0(asarray)
#     13362    0.048    0.000    0.048    0.000 :0(astype)
#    130754    0.227    0.000    0.227    0.000 :0(callable)
#    130612    0.200    0.000    0.200    0.000 :0(checknull)
#     17913    0.019    0.000    0.019    0.000 :0(clear)
#         2    0.000    0.000    0.000    0.000 :0(close)
#         2    0.000    0.000    0.000    0.000 :0(compile)
#    157251    0.363    0.000    0.363    0.000 :0(copy)
#        48    0.000    0.000    0.000    0.000 :0(count)
#        12    0.000    0.000    0.000    0.000 :0(datetime_data)
#        12    0.000    0.000    0.000    0.000 :0(diagonal)
#        12    0.000    0.000    0.000    0.000 :0(dot)
#     25819    0.048    0.000    0.048    0.000 :0(dtypes_all_equal)
#         5    0.000    0.000    0.000    0.000 :0(dumps)
#    267382    0.590    0.000    0.590    0.000 :0(empty)
#       174    0.001    0.000    0.001    0.000 :0(end)
#        22    0.000    0.000    0.000    0.000 :0(endswith)
#         9    0.000    0.000    0.000    0.000 :0(ensure_int64)
#     43913    0.062    0.000    0.062    0.000 :0(ensure_object)
#      7813    0.016    0.000    0.016    0.000 :0(ensure_platform_int)
#        22    0.000    0.000    0.000    0.000 :0(eq)
#       2/1    0.000    0.000  117.452  117.452 :0(exec)
#         2    0.000    0.000    0.000    0.000 :0(extend)
#         9    0.000    0.000    0.000    0.000 :0(factorize)
#     13721    0.046    0.000    0.046    0.000 :0(fill)
#      1111    0.002    0.000    0.002    0.000 :0(find)
#      1110    0.014    0.000    0.014    0.000 :0(flush)
#     12316    0.027    0.000    0.027    0.000 :0(format)
#         3    0.000    0.000    0.000    0.000 :0(from_bytes)
#       272    0.001    0.000    0.001    0.000 :0(fromkeys)
#      1672    0.002    0.000    0.002    0.000 :0(fspath)
#     79133    0.112    0.000    0.112    0.000 :0(get)
#     11263    0.037    0.000    0.037    0.000 :0(get_blkno_placements)
#      1114    0.001    0.000    0.001    0.000 :0(get_ident)
#        60    0.001    0.000    0.001    0.000 :0(get_indexer)
#     56995    0.123    0.000    0.123    0.000 :0(get_loc)
#        97    0.001    0.000    0.003    0.000 :0(get_slice)
# 1811045/1811023    2.278    0.000    2.359    0.000 :0(getattr)
#      2996    0.005    0.000    0.005    0.000 :0(geterrobj)
#       555    0.001    0.000    0.001    0.000 :0(getpid)
#        80    0.000    0.000    0.000    0.000 :0(getvalue)
#         2    0.000    0.000    0.000    0.000 :0(group)
#       174    0.001    0.000    0.001    0.000 :0(groupdict)
#         2    0.000    0.000    0.000    0.000 :0(gt)
#         8    0.000    0.000    0.000    0.000 :0(has_reference)
#    364843    0.472    0.000    0.475    0.000 :0(hasattr)
#    258440    0.270    0.000    0.270    0.000 :0(hash)
#     84608    0.095    0.000    0.095    0.000 :0(id)
# 261939/243569    1.141    0.000    1.624    0.000 :0(implement_array_function)
#        90    0.000    0.000    0.000    0.000 :0(index)
#        69    0.001    0.000    0.002    0.000 :0(infer_dtype)
#        38    0.000    0.000    0.000    0.000 :0(infer_tzinfo)
#     11020    0.013    0.000    0.013    0.000 :0(insert)
#         1    0.000    0.000    0.000    0.000 :0(intern)
#        38    0.001    0.000    0.001    0.000 :0(ints_to_pydatetime)
#         1    0.000    0.000    0.000    0.000 :0(inv)
#         8    0.000    0.000    0.000    0.000 :0(is_all_arraylike)
#     17501    0.037    0.000    0.037    0.000 :0(is_bool)
#        56    0.000    0.000    0.000    0.000 :0(is_bool_list)
#         1    0.000    0.000    0.000    0.000 :0(is_builtin)
#    111444    0.109    0.000    0.109    0.000 :0(is_float)
#        12    0.000    0.000    0.000    0.000 :0(is_float_nan)
#         2    0.000    0.000    0.000    0.000 :0(is_frozen)
#    172933    0.207    0.000    0.207    0.000 :0(is_integer)
#     21444    0.037    0.000    0.037    0.000 :0(is_iterator)
#    284148    0.468    0.000    0.470    0.000 :0(is_list_like)
#        34    0.000    0.000    0.000    0.000 :0(is_matching_na)
#        24    0.000    0.000    0.000    0.000 :0(is_on_offset)
#    321746    0.450    0.000    0.450    0.000 :0(is_scalar)
#        50    0.000    0.000    0.000    0.000 :0(is_unitless)
# 8054835/7856518   12.360    0.000   20.436    0.000 :0(isinstance)
#     36396    0.248    0.000    0.248    0.000 :0(isnaobj)
#    573841    0.644    0.000    0.644    0.000 :0(issubclass)
#        10    0.000    0.000    0.000    0.000 :0(item)
#      2714    0.004    0.000    0.004    0.000 :0(item_from_zerodim)
#     34254    0.070    0.000    0.070    0.000 :0(items)
#       925    0.001    0.000    0.003    0.000 :0(iter)
#       235    0.000    0.000    0.000    0.000 :0(join)
#     13382    0.033    0.000    0.033    0.000 :0(keys)
#         2    0.000    0.000    0.000    0.000 :0(le)
# 2577264/2208249    3.978    0.000    4.748    0.000 :0(len)
#       710    0.001    0.000    0.001    0.000 :0(ljust)
#         1    0.000    0.000    0.000    0.000 :0(loads)
#      1110    0.006    0.000    0.006    0.000 :0(localtime)
#         1    0.000    0.000    0.000    0.000 :0(lookup)
#         1    0.000    0.000    0.000    0.000 :0(lookup_error)
#      4686    0.006    0.000    0.006    0.000 :0(lower)
#        13    0.000    0.000    0.000    0.000 :0(lstrip)
#        72    0.001    0.000    0.003    0.000 :0(map_infer)
#       175    0.001    0.000    0.001    0.000 :0(match)
#     91616    0.187    0.000    0.189    0.000 :0(max)
#    135474    1.037    0.000    3.758    0.000 :0(maybe_convert_objects)
#        76    0.000    0.000    0.000    0.000 :0(maybe_get_tz)
#     54781    0.132    0.000    0.132    0.000 :0(min)
#         2    0.000    0.000    0.000    0.000 :0(mul)
#    114464    0.137    0.000    0.137    0.000 :0(next)
#         1    0.000    0.000    0.000    0.000 :0(nl_langinfo)
#       254    0.001    0.000    0.001    0.000 :0(nonzero)
#        20    0.000    0.000    0.000    0.000 :0(normalize_axis_index)
#         2    0.000    0.000    0.000    0.000 :0(now)
#         2    0.000    0.000    0.000    0.000 :0(open)
#         1    0.000    0.000    0.000    0.000 :0(open_code)
#         8    0.000    0.000    0.000    0.000 :0(or_)
#        19    0.000    0.000    0.000    0.000 :0(ord)
#    106573    0.176    0.000    0.176    0.000 :0(pop)
#        50    0.000    0.000    0.000    0.000 :0(py_get_unit_from_dtype)
#     28015    0.066    0.000    0.066    0.000 :0(ravel)
#         1    0.000    0.000    0.000    0.000 :0(read)
#     43620    0.319    0.000    0.319    0.000 :0(reduce)
#      2223    0.002    0.000    0.002    0.000 :0(release)
#        11    0.000    0.000    0.000    0.000 :0(release_lock)
#     10998    0.021    0.000    0.021    0.000 :0(remove)
#       408    0.001    0.000    0.001    0.000 :0(replace)
#        26    0.000    0.000    0.000    0.000 :0(reset)
#     55479    0.089    0.000    0.089    0.000 :0(reshape)
#         2    0.000    0.000    0.000    0.000 :0(reverse)
#      1665    0.003    0.000    0.003    0.000 :0(rfind)
#       216    0.000    0.000    0.000    0.000 :0(rjust)
#        12    0.000    0.000    0.000    0.000 :0(rollback)
#       858    0.010    0.000    0.010    0.000 :0(round)
#        15    0.000    0.000    0.000    0.000 :0(rpartition)
#        86    0.000    0.000    0.000    0.000 :0(rstrip)
#       616    0.008    0.000    0.008    0.000 :0(scalar_compare)
#      9525    0.015    0.000    0.015    0.000 :0(search)
#        26    0.000    0.000    0.000    0.000 :0(set)
#         1    0.000    0.000    0.000    0.000 :0(setattr)
#      1498    0.004    0.000    0.004    0.000 :0(seterrobj)
#       174    0.000    0.000    0.000    0.000 :0(setlocale)
#         1    0.007    0.007    0.007    0.007 :0(setprofile)
#         2    0.000    0.000    0.000    0.000 :0(slice_len)
#        22    0.000    0.000    0.000    0.000 :0(sort)
#      6527    0.063    0.000    0.763    0.000 :0(sorted)
#     22800    0.043    0.000    0.043    0.000 :0(split)
#         4    0.000    0.000    0.000    0.000 :0(startswith)
#        10    0.000    0.000    0.000    0.000 :0(stat)
#      1128    0.007    0.000    0.007    0.000 :0(strftime)
#        13    0.000    0.000    0.000    0.000 :0(strip)
#       174    0.001    0.000    0.033    0.000 :0(strptime)
#         2    0.000    0.000    0.000    0.000 :0(sub)
#     71425    0.148    0.000    0.446    0.000 :0(sum)
#      5750    0.018    0.000    0.018    0.000 :0(take)
#       108    0.000    0.000    0.000    0.000 :0(take_1d_int64_int64)
#         2    0.000    0.000    0.000    0.000 :0(take_2d_axis0_bool_bool)
#       174    0.001    0.000    0.001    0.000 :0(take_2d_axis0_float64_float64)
#         4    0.000    0.000    0.000    0.000 :0(take_2d_axis0_int64_int64)
#       594    0.002    0.000    0.002    0.000 :0(take_2d_axis0_object_object)
#         2    0.000    0.000    0.000    0.000 :0(take_2d_axis1_bool_bool)
#         8    0.000    0.000    0.000    0.000 :0(take_2d_axis1_float64_float64)
#      6542    0.028    0.000    0.028    0.000 :0(take_2d_axis1_object_object)
#       555    0.001    0.000    0.001    0.000 :0(time)
#        50    0.002    0.000    0.010    0.000 :0(to_offset)
#       348    0.001    0.000    0.001    0.000 :0(toordinal)
#       252    0.001    0.000    0.001    0.000 :0(transpose)
#        15    0.000    0.000    0.000    0.000 :0(unicode_iscased)
#        11    0.000    0.000    0.000    0.000 :0(unicode_tolower)
#        18    0.000    0.000    0.000    0.000 :0(union)
#         2    0.000    0.000    0.000    0.000 :0(unique)
#        96    0.000    0.000    0.000    0.000 :0(update)
#     28421    0.032    0.000    0.032    0.000 :0(upper)
#     40103    0.047    0.000    0.047    0.000 :0(values)
#     20130    0.056    0.000    0.056    0.000 :0(view)
#       174    0.001    0.000    0.001    0.000 :0(weekday)
#         3    0.000    0.000    0.000    0.000 :0(word_len)
#      1191    0.003    0.000    0.003    0.000 :0(write)
#         1    0.000    0.000    0.000    0.000 :0(write_csv_rows)
#         1    0.000    0.000    0.000    0.000 :0(writer)
#         1    0.000    0.000    0.000    0.000 :0(writerow)
#       220    0.001    0.000    0.001    0.000 :0(zeros)
#       124    0.001    0.000    0.005    0.000 <__array_function__ internals>:177(all)
#         8    0.000    0.000    0.000    0.000 <__array_function__ internals>:177(amax)
#        20    0.000    0.000    0.001    0.000 <__array_function__ internals>:177(append)
#      9105    0.047    0.000    0.213    0.000 <__array_function__ internals>:177(argsort)
#        33    0.000    0.000    0.001    0.000 <__array_function__ internals>:177(array_equal)
#      9105    0.045    0.000    0.233    0.000 <__array_function__ internals>:177(atleast_2d)
#        10    0.000    0.000    0.000    0.000 <__array_function__ internals>:177(bincount)
#        12    0.000    0.000    0.001    0.000 <__array_function__ internals>:177(broadcast_to)
#     78327    0.434    0.000    1.063    0.000 <__array_function__ internals>:177(concatenate)
#    135576    0.713    0.000    1.300    0.000 <__array_function__ internals>:177(copyto)
#        20    0.000    0.000    0.001    0.000 <__array_function__ internals>:177(delete)
#        12    0.000    0.000    0.001    0.000 <__array_function__ internals>:177(diag)
#        12    0.000    0.000    0.000    0.000 <__array_function__ internals>:177(diagonal)
#        10    0.000    0.000    0.002    0.000 <__array_function__ internals>:177(insert)
#        26    0.000    0.000    0.008    0.000 <__array_function__ internals>:177(isclose)
#         8    0.000    0.000    0.000    0.000 <__array_function__ internals>:177(lexsort)
#        10    0.000    0.000    0.001    0.000 <__array_function__ internals>:177(moveaxis)
#         1    0.000    0.000    0.000    0.000 <__array_function__ internals>:177(prod)
#        20    0.000    0.000    0.000    0.000 <__array_function__ internals>:177(putmask)
#        20    0.000    0.000    0.000    0.000 <__array_function__ internals>:177(ravel)
#     20355    0.108    0.000    0.218    0.000 <__array_function__ internals>:177(result_type)
#        20    0.000    0.000    0.000    0.000 <__array_function__ internals>:177(sort)
#      9105    0.047    0.000    0.571    0.000 <__array_function__ internals>:177(vstack)
#         1    0.000    0.000    0.001    0.001 <frozen importlib._bootstrap>:1002(_gcd_import)
#     11128    0.060    0.000    0.096    0.000 <frozen importlib._bootstrap>:1017(_handle_fromlist)
#         2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:103(release)
#         2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:143(__init__)
#         2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:147(__enter__)
#         2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:151(__exit__)
#         2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:157(_get_module_lock)
#         2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:176(cb)
#         1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:211(_call_with_frames_removed)
#        37    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:222(_verbose_message)
#         2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:342(__init__)
#         1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:35(_new_module)
#         2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:376(cached)
#         1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:389(parent)
#         1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:397(has_location)
#         1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:477(_init_module_attrs)
#         1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:549(module_from_spec)
#         2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:58(__init__)
#         1    0.000    0.000    0.001    0.001 <frozen importlib._bootstrap>:650(_load_unlocked)
#         2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:725(find_spec)
#         2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:78(acquire)
#         2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:800(find_spec)
#         7    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:863(__enter__)
#         7    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:867(__exit__)
#         1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:881(_find_spec_legacy)
#         2    0.000    0.000    0.001    0.001 <frozen importlib._bootstrap>:890(_find_spec)
#         1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:937(_sanity_check)
#         2    0.000    0.000    0.002    0.001 <frozen importlib._bootstrap>:956(_find_and_load_unlocked)
#         2    0.000    0.000    0.002    0.001 <frozen importlib._bootstrap>:986(_find_and_load)
#         1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1010(path_stats)
#         8    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1265(_path_importer_cache)
#         2    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap_external>:1302(_get_spec)
#         2    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap_external>:1334(find_spec)
#         1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1426(_get_spec)
#         7    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap_external>:1431(find_spec)
#         2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:294(cache_from_source)
#         7    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:36(_relax_case)
#         1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:424(_get_cached)
#         1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:456(_check_name_wrapper)
#         1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:493(_classify_pyc)
#         3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:51(_unpack_uint32)
#         1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:526(_validate_timestamp_pyc)
#         1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:578(_compile_bytecode)
#        36    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:62(_path_join)
#         1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:629(spec_from_file_location)
#        36    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:64(<listcomp>)
#         2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:68(_path_split)
#         1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:774(create_module)
#         1    0.000    0.000    0.001    0.001 <frozen importlib._bootstrap_external>:777(exec_module)
#         9    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:80(_path_stat)
#         1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:849(get_code)
#         1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:90(_path_is_mode_type)
#         1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:939(__init__)
#         1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:964(get_filename)
#         1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:969(get_data)
#         1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:99(_path_isfile)
#         1    0.000    0.000  117.452  117.452 <string>:1(<module>)
#         2    0.000    0.000    0.000    0.000 <string>:1(__new__)
#         2    0.000    0.000    0.000    0.000 <string>:2(__init__)
#         7    0.000    0.000    0.000    0.000 Account.py:295(to_json)
#       908    0.386    0.000  114.116    0.126 AccountSet.py:1048(getAccounts)
#         1    0.000    0.000    0.000    0.000 AccountSet.py:1114(to_json)
#       102    0.002    0.000    0.002    0.000 AccountSet.py:435(getBalances)
#      26/8    0.004    0.000    5.910    0.739 AccountSet.py:463(executeTransaction)
#        24    0.000    0.000    0.000    0.000 AccountSet.py:509(<listcomp>)
#         2    0.005    0.002    4.373    2.187 AccountSet.py:809(allocate_additional_loan_payments)
#         2    0.000    0.000    0.000    0.000 AccountSet.py:816(<listcomp>)
#         2    0.000    0.000    0.000    0.000 AccountSet.py:847(<listcomp>)
#         2    0.000    0.000    0.000    0.000 AccountSet.py:848(<listcomp>)
#        18    0.000    0.000    0.000    0.000 AccountSet.py:869(<listcomp>)
#        18    0.000    0.000    0.000    0.000 AccountSet.py:870(<listcomp>)
#         2    0.000    0.000    0.000    0.000 AccountSet.py:991(<listcomp>)
#         1    0.000    0.000    0.004    0.004 BudgetItem.py:178(to_json)
#         6    0.000    0.000    0.002    0.000 BudgetItem.py:4(__init__)
#         2    0.000    0.000    0.000    0.000 BudgetSet.py:13(__init__)
#         6    0.000    0.000    0.063    0.010 BudgetSet.py:135(addBudgetItem)
#         1    0.000    0.000    0.004    0.004 BudgetSet.py:201(to_json)
#         8    0.000    0.000    0.086    0.011 BudgetSet.py:48(getBudgetItems)
#         1    0.000    0.000    0.000    0.000 ExpenseForecast.py:1000(<listcomp>)
#         8    0.000    0.000    0.008    0.001 ExpenseForecast.py:1027(processDeferredTransactions)
#       8/4    0.005    0.001   70.070   17.517 ExpenseForecast.py:1143(executeTransactionsForDay)
#         8    0.000    0.000    0.000    0.000 ExpenseForecast.py:1186(<listcomp>)
#         8    0.023    0.003   54.630    6.829 ExpenseForecast.py:2164(calculateInterestAccrualsForDay)
#         4    0.004    0.001    7.248    1.812 ExpenseForecast.py:2301(executeMinimumPayments)
#        32    0.019    0.001   41.007    1.281 ExpenseForecast.py:2439(sync_account_set_w_forecast_day)
#         2    0.001    0.001    3.410    1.705 ExpenseForecast.py:2478(propagateTransactionsIntoTheFuture)
#         4    0.000    0.000    0.212    0.053 ExpenseForecast.py:2524(updateProposedTransactionsBasedOnOtherSets)
#         4    0.002    0.000   33.562    8.390 ExpenseForecast.py:2575(overwriteOGSatisficeInterestWhenAdditionalLoanPayment)
#       2/1    0.001    0.000   94.017   94.017 ExpenseForecast.py:2605(assessPotentialOptimizations)
#         2    0.001    0.000   46.280   23.140 ExpenseForecast.py:2708(satisfice)
#       2/1    0.000    0.000  117.437  117.437 ExpenseForecast.py:2763(computeOptimalForecast)
#         2    0.000    0.000    0.000    0.000 ExpenseForecast.py:2782(<listcomp>)
#         1    0.000    0.000    0.004    0.004 ExpenseForecast.py:3246(to_json)
#         1    0.000    0.000  117.452  117.452 ExpenseForecast.py:592(runForecast)
#         1    0.000    0.000    0.005    0.005 ExpenseForecast.py:709(writeToJSONFile)
#         2    0.000    0.000    0.319    0.160 ExpenseForecast.py:726(getInitialForecastRow)
#         4    0.000    0.000    0.024    0.006 ExpenseForecast.py:767(addANewDayToTheForecast)
#         4    0.000    0.000    0.001    0.000 ExpenseForecast.py:768(<listcomp>)
#         4    0.000    0.000    0.000    0.000 ExpenseForecast.py:770(<listcomp>)
#         1    0.000    0.000    0.001    0.001 ExpenseForecast.py:788(checkIfTxnIsIncome)
#         1    0.001    0.001    1.966    1.966 ExpenseForecast.py:799(updateBalancesAndMemo)
#         1    0.000    0.000   60.322   60.322 ExpenseForecast.py:825(attemptTransaction)
#         8    0.000    0.000    4.554    0.569 ExpenseForecast.py:856(processConfirmedTransactions)
#       8/4    0.001    0.000   66.142   16.536 ExpenseForecast.py:878(processProposedTransactions)
#         1    0.000    0.000    0.001    0.001 ExpenseForecast.py:990(<listcomp>)
#         1    0.000    0.000    0.001    0.001 ExpenseForecast.py:994(<listcomp>)
#         1    0.000    0.000    0.000    0.000 MemoRule.py:138(to_json)
#         2    0.000    0.000    0.000    0.000 MemoRule.py:6(__init__)
#         2    0.000    0.000    0.000    0.000 MemoRuleSet.py:13(__init__)
#         4    0.000    0.000    0.023    0.006 MemoRuleSet.py:133(getMemoRules)
#         1    0.000    0.000    0.000    0.000 MemoRuleSet.py:152(to_json)
#         2    0.000    0.000    0.022    0.011 MemoRuleSet.py:51(findMatchingMemoRule)
#         1    0.000    0.000    0.000    0.000 MilestoneSet.py:78(to_json)
#      1110    0.007    0.000    0.029    0.000 __init__.py:1058(flush)
#      1110    0.007    0.000    0.089    0.000 __init__.py:1069(emit)
#         1    0.000    0.000    0.001    0.001 __init__.py:109(import_module)
#       555    0.002    0.000    0.053    0.000 __init__.py:1174(emit)
#       555    0.001    0.000    0.002    0.000 __init__.py:119(getLevelName)
#       252    0.002    0.000    0.055    0.000 __init__.py:1412(debug)
#       411    0.003    0.000    0.125    0.000 __init__.py:1424(info)
#       555    0.005    0.000    0.010    0.000 __init__.py:1502(findCaller)
#       555    0.003    0.000    0.043    0.000 __init__.py:1538(makeRecord)
#       555    0.006    0.000    0.174    0.000 __init__.py:1553(_log)
#       555    0.001    0.000    0.002    0.000 __init__.py:156(<lambda>)
#        42    0.000    0.000    0.001    0.000 __init__.py:157(align_method_SERIES)
#       555    0.003    0.000    0.115    0.000 __init__.py:1579(handle)
#       555    0.004    0.000    0.112    0.000 __init__.py:1633(callHandlers)
#         3    0.000    0.000    0.000    0.000 __init__.py:1663(getEffectiveLevel)
#       663    0.001    0.000    0.001    0.000 __init__.py:1677(isEnabledFor)
#        13    0.000    0.000    0.000    0.000 __init__.py:211(align_method_FRAME)
#         3    0.000    0.000    0.000    0.000 __init__.py:214(_acquireLock)
#         3    0.000    0.000    0.000    0.000 __init__.py:223(_releaseLock)
#       555    0.013    0.000    0.040    0.000 __init__.py:284(__init__)
#    373189    0.463    0.000    0.463    0.000 __init__.py:33(using_copy_on_write)
#        13    0.000    0.000    0.000    0.000 __init__.py:337(should_reindex_frame_op)
#      1110    0.002    0.000    0.002    0.000 __init__.py:360(getMessage)
#      1110    0.003    0.000    0.004    0.000 __init__.py:423(usesTime)
#      1110    0.003    0.000    0.003    0.000 __init__.py:431(_format)
#      1110    0.003    0.000    0.006    0.000 __init__.py:434(format)
#         7    0.000    0.000    0.004    0.001 __init__.py:444(f)
#      1110    0.008    0.000    0.020    0.000 __init__.py:584(formatTime)
#      1110    0.003    0.000    0.007    0.000 __init__.py:629(usesTime)
#      1110    0.003    0.000    0.009    0.000 __init__.py:635(formatMessage)
#      1110    0.009    0.000    0.047    0.000 __init__.py:651(format)
#      1665    0.003    0.000    0.003    0.000 __init__.py:792(filter)
#      2220    0.005    0.000    0.008    0.000 __init__.py:894(acquire)
#      2220    0.005    0.000    0.007    0.000 __init__.py:901(release)
#      1110    0.003    0.000    0.050    0.000 __init__.py:914(format)
#      1110    0.008    0.000    0.108    0.000 __init__.py:937(handle)
#     28421    0.081    0.000    0.112    0.000 _asarray.py:112(<setcomp>)
#     28421    0.180    0.000    0.389    0.000 _asarray.py:31(require)
#         1    0.000    0.000    0.000    0.000 _bootlocale.py:33(getpreferredencoding)
#         3    0.000    0.000    0.000    0.000 _collections_abc.py:302(__subclasshook__)
#        19    0.000    0.000    0.000    0.000 _collections_abc.py:392(__subclasshook__)
#         1    0.000    0.000    0.000    0.000 _collections_abc.py:72(_check_methods)
#     33227    0.046    0.000    0.046    0.000 _dtype.py:24(_kind_name)
#     33227    0.064    0.000    0.231    0.000 _dtype.py:330(_name_includes_bit_suffix)
#     33227    0.208    0.000    0.549    0.000 _dtype.py:344(_name_get)
#         5    0.000    0.000    0.001    0.000 _json.py:130(to_json)
#         5    0.000    0.000    0.000    0.000 _json.py:210(__init__)
#         5    0.000    0.000    0.000    0.000 _json.py:242(write)
#         5    0.000    0.000    0.000    0.000 _json.py:279(obj_to_write)
#         5    0.000    0.000    0.000    0.000 _json.py:288(_format_axes)
#        56    0.000    0.000    0.001    0.000 _methods.py:39(_amax)
#        39    0.000    0.000    0.001    0.000 _methods.py:47(_sum)
#      6919    0.019    0.000    0.071    0.000 _methods.py:55(_any)
#     36525    0.093    0.000    0.357    0.000 _methods.py:61(_all)
#         1    0.000    0.000    0.001    0.001 _optional.py:91(import_optional_dependency)
#        26    0.001    0.000    0.002    0.000 _ranges.py:20(generate_regular_range)
#       174    0.001    0.000    0.004    0.000 _strptime.py:26(_getlang)
#       174    0.014    0.000    0.030    0.000 _strptime.py:309(_strptime)
#       174    0.002    0.000    0.032    0.000 _strptime.py:565(_strptime_datetime)
#      1498    0.008    0.000    0.010    0.000 _ufunc_config.py:132(geterr)
#      1498    0.012    0.000    0.029    0.000 _ufunc_config.py:33(seterr)
#       749    0.001    0.000    0.001    0.000 _ufunc_config.py:426(__init__)
#       749    0.004    0.000    0.020    0.000 _ufunc_config.py:430(__enter__)
#       749    0.003    0.000    0.016    0.000 _ufunc_config.py:435(__exit__)
#        52    0.000    0.000    0.000    0.000 _ufunc_config.py:452(_no_nep50_warning)
#      6456    0.019    0.000    0.028    0.000 _validators.py:224(validate_bool_kwarg)
#        38    0.000    0.000    0.000    0.000 _validators.py:393(validate_inclusive)
#     60/12    0.000    0.000    0.000    0.000 abc.py:100(__subclasscheck__)
#    271604    0.537    0.000    0.868    0.000 abc.py:96(__instancecheck__)
#         8    0.001    0.000    0.001    0.000 algorithms.py:1009(rank)
#        19    0.000    0.000    0.001    0.000 algorithms.py:106(_ensure_data)
#        12    0.000    0.000    0.002    0.000 algorithms.py:1068(checked_add_with_arr)
#       244    0.002    0.000    0.004    0.000 algorithms.py:1165(take)
#        20    0.000    0.000    0.000    0.000 algorithms.py:184(_reconstruct_data)
#        36    0.000    0.000    0.001    0.000 algorithms.py:217(_ensure_arraylike)
#        11    0.000    0.000    0.001    0.000 algorithms.py:251(_get_hashtable_algo)
#        11    0.000    0.000    0.000    0.000 algorithms.py:269(_check_object_for_strings)
#         2    0.000    0.000    0.000    0.000 algorithms.py:296(unique)
#         2    0.000    0.000    0.000    0.000 algorithms.py:416(unique_with_mask)
#        13    0.001    0.000    0.004    0.000 algorithms.py:443(isin)
#         9    0.000    0.000    0.001    0.000 algorithms.py:534(factorize_array)
#         9    0.000    0.000    0.002    0.000 algorithms.py:596(factorize)
#     10979    0.109    0.000    1.853    0.000 api.py:112(_get_combined_index)
#      5505    0.105    0.000    1.010    0.000 api.py:194(union_indexes)
#      5501    0.028    0.000    0.095    0.000 api.py:246(_find_common_index_dtype)
#      5501    0.022    0.000    0.034    0.000 api.py:258(<listcomp>)
#         2    0.000    0.000    0.000    0.000 api.py:269(<listcomp>)
#         2    0.000    0.000    0.000    0.000 api.py:270(<listcomp>)
#     11004    0.025    0.000    0.543    0.000 api.py:299(<genexpr>)
#      5503    0.029    0.000    0.044    0.000 api.py:311(_sanitize_and_check)
#      5503    0.010    0.000    0.010    0.000 api.py:332(<setcomp>)
#     13785    0.053    0.000    0.188    0.000 api.py:367(default_index)
#     10979    0.061    0.000    2.272    0.000 api.py:68(get_objs_combined_axis)
#     10979    0.111    0.000    0.358    0.000 api.py:94(<listcomp>)
#     10979    0.155    0.000    0.281    0.000 api.py:98(_get_distinct_objs)
#        49    0.000    0.000    0.002    0.000 array_ops.py:142(_na_arithmetic_op)
#        35    0.000    0.000    0.007    0.000 array_ops.py:191(arithmetic_op)
#       418    0.009    0.000    0.059    0.000 array_ops.py:237(comparison_op)
#        32    0.000    0.000    0.000    0.000 array_ops.py:301(na_logical_op)
#        32    0.001    0.000    0.005    0.000 array_ops.py:342(logical_op)
#        64    0.000    0.000    0.001    0.000 array_ops.py:360(fill_bool)
#        13    0.000    0.000    0.000    0.000 array_ops.py:408(get_array_op)
#        35    0.000    0.000    0.000    0.000 array_ops.py:451(maybe_prepare_scalar_for_op)
#        23    0.000    0.000    0.000    0.000 array_ops.py:532(_bool_arith_check)
#       616    0.006    0.000    0.027    0.000 array_ops.py:67(comp_method_OBJECT_ARRAY)
#         2    0.000    0.000    0.001    0.001 arraylike.py:192(__sub__)
#         2    0.000    0.000    0.001    0.001 arraylike.py:200(__mul__)
#       609    0.003    0.000    0.333    0.001 arraylike.py:38(__eq__)
#         8    0.000    0.000    0.006    0.001 arraylike.py:42(__ne__)
#         8    0.000    0.000    0.006    0.001 arraylike.py:50(__le__)
#        23    0.000    0.000    0.017    0.001 arraylike.py:54(__gt__)
#        24    0.000    0.000    0.018    0.001 arraylike.py:68(__and__)
#         8    0.000    0.000    0.006    0.001 arraylike.py:76(__or__)
#        24    0.000    0.000    0.017    0.001 arraylike.py:98(__add__)
#     59928    0.274    0.000    1.905    0.000 astype.py:162(astype_array)
#     59928    0.512    0.000    3.139    0.000 astype.py:196(astype_array_safe)
#      5620    0.127    0.000    0.552    0.000 astype.py:60(_astype_nansafe)
#         2    0.000    0.000    0.000    0.000 base.py:1024(unique)
#       244    0.004    0.000    0.015    0.000 base.py:1070(take)
#       244    0.000    0.000    0.000    0.000 base.py:1101(_maybe_disallow_fill)
#      5509    0.044    0.000    0.401    0.000 base.py:1175(copy)
#        26    0.000    0.000    0.000    0.000 base.py:122(_reset_cache)
#        24    0.000    0.000    0.005    0.000 base.py:1321(format)
#        22    0.001    0.000    0.016    0.001 base.py:1339(_arith_method)
#        15    0.000    0.000    0.005    0.000 base.py:1343(_format_with_header)
#        12    0.000    0.000    0.003    0.000 base.py:1352(<listcomp>)
#         2    0.000    0.000    0.000    0.000 base.py:1364(_format_native_types)
#         1    0.000    0.000    0.000    0.000 base.py:153(_consolidate_inplace)
#     56102    0.057    0.000    0.057    0.000 base.py:1582(name)
#      5531    0.075    0.000    0.196    0.000 base.py:1600(_validate_names)
#       124    0.000    0.000    0.001    0.000 base.py:162(array)
#     22426    0.055    0.000    0.078    0.000 base.py:1668(_get_names)
#      5515    0.036    0.000    0.119    0.000 base.py:1671(_set_names)
#         6    0.000    0.000    0.000    0.000 base.py:171(setitem_inplace)
#      5515    0.077    0.000    0.535    0.000 base.py:1716(set_names)
#      5495    0.023    0.000    0.557    0.000 base.py:1823(rename)
#        73    0.000    0.000    0.000    0.000 base.py:1877(nlevels)
#       270    0.001    0.000    0.037    0.000 base.py:208(interleaved_dtype)
#         2    0.000    0.000    0.000    0.000 base.py:2107(_can_hold_na)
#        32    0.000    0.000    0.001    0.000 base.py:2121(is_monotonic_increasing)
#      5615    0.009    0.000    0.012    0.000 base.py:2205(is_unique)
#        46    0.000    0.000    0.001    0.000 base.py:2636(inferred_type)
#        72    0.000    0.000    0.001    0.000 base.py:2660(_is_multi)
#        61    0.000    0.000    0.000    0.000 base.py:2678(_na_value)
#         1    0.000    0.000    0.000    0.000 base.py:2688(_isnan)
#         1    0.000    0.000    0.000    0.000 base.py:2717(isna)
#       330    0.001    0.000    0.009    0.000 base.py:286(is_dtype)
#        40    0.000    0.000    0.001    0.000 base.py:2885(unique)
#         4    0.000    0.000    0.000    0.000 base.py:3044(_get_reconciled_name_object)
#        24    0.000    0.000    0.000    0.000 base.py:3055(_validate_sort_keyword)
#         4    0.000    0.000    0.001    0.000 base.py:3082(union)
#     54480    0.125    0.000    0.462    0.000 base.py:309(shape)
#     61740    0.062    0.000    0.062    0.000 base.py:326(ndim)
#        20    0.000    0.000    0.001    0.000 base.py:3282(_wrap_setop_result)
#        20    0.000    0.000    0.022    0.001 base.py:3292(intersection)
#        20    0.000    0.000    0.014    0.001 base.py:3376(_intersection)
#        20    0.000    0.000    0.001    0.000 base.py:3406(_wrap_intersection_result)
#        20    0.001    0.000    0.013    0.001 base.py:3410(_intersection_via_get_indexer)
#        24    0.000    0.000    0.000    0.000 base.py:3608(_assert_can_do_setop)
#        24    0.000    0.000    0.001    0.000 base.py:3614(_convert_can_do_setop)
#     56995    0.245    0.000    0.427    0.000 base.py:3625(get_loc)
#        60    0.002    0.000    0.037    0.001 base.py:3716(get_indexer)
#        60    0.000    0.000    0.003    0.000 base.py:3804(_get_indexer)
#        60    0.000    0.000    0.005    0.000 base.py:3849(_check_indexing_method)
#        55    0.000    0.000    0.001    0.000 base.py:4049(_validate_positional_slice)
#        42    0.001    0.000    0.005    0.000 base.py:4059(_convert_slice_indexer)
#       126    0.000    0.000    0.000    0.000 base.py:4084(is_int)
#      5848    0.019    0.000    0.026    0.000 base.py:450(_engine_type)
#       216    0.001    0.000    0.002    0.000 base.py:46(__len__)
#     23795    1.023    0.000    7.138    0.000 base.py:469(__new__)
#         5    0.000    0.000    0.000    0.000 base.py:4905(values)
#    135025    0.157    0.000    0.296    0.000 base.py:4937(_values)
#     10948    0.052    0.000    0.089    0.000 base.py:494(find)
#      5908    0.037    0.000    0.096    0.000 base.py:4963(_get_engine_target)
#        10    0.000    0.000    0.000    0.000 base.py:5071(_validate_fill_value)
#     58875    0.204    0.000    0.512    0.000 base.py:5109(__contains__)
#    111419    0.504    0.000    0.992    0.000 base.py:5159(__getitem__)
#        14    0.000    0.000    0.000    0.000 base.py:5205(_getitem_slice)
#      2750    0.011    0.000    0.075    0.000 base.py:5212(_can_hold_identifiers_and_holds_name)
#      5531    0.086    0.000    2.559    0.000 base.py:5230(append)
#      5531    0.021    0.000    0.032    0.000 base.py:5255(<setcomp>)
#        36    0.000    0.000    0.016    0.000 base.py:5260(_concat)
#        36    0.000    0.000    0.000    0.000 base.py:5264(<listcomp>)
#     36384    0.063    0.000    0.089    0.000 base.py:530(<genexpr>)
#     22326    0.356    0.000    2.037    0.000 base.py:5314(equals)
#     34308    0.195    0.000    0.752    0.000 base.py:54(shape)
#      5468    0.036    0.000    0.638    0.000 base.py:5401(identical)
#     10936    0.027    0.000    0.065    0.000 base.py:5414(<genexpr>)
#    102924    0.181    0.000    0.557    0.000 base.py:56(<genexpr>)
#     23795    0.060    0.000    0.060    0.000 base.py:565(_ensure_array)
#         4    0.000    0.000    0.000    0.000 base.py:5739(_should_fallback_to_positional)
#     30338    0.143    0.000    0.518    0.000 base.py:58(_validate_set_axis)
#     23795    0.124    0.000    0.375    0.000 base.py:583(_dtype_to_subclass)
#        40    0.000    0.000    0.027    0.001 base.py:5839(get_indexer_for)
#       108    0.000    0.000    0.000    0.000 base.py:6001(_index_as_unique)
#        60    0.000    0.000    0.002    0.000 base.py:6013(_maybe_promote)
#        80    0.001    0.000    0.011    0.000 base.py:6083(_should_compare)
#        80    0.000    0.000    0.002    0.000 base.py:6101(_is_comparable_dtype)
#        40    0.000    0.000    0.016    0.000 base.py:6190(_transform_index)
#        40    0.000    0.000    0.003    0.000 base.py:6207(<listcomp>)
#        13    0.000    0.000    0.004    0.000 base.py:6210(isin)
#     56995    0.059    0.000    0.059    0.000 base.py:6354(_maybe_cast_indexer)
#        60    0.000    0.000    0.007    0.000 base.py:6361(_maybe_cast_listlike_indexer)
#       291    0.000    0.000    0.000    0.000 base.py:6367(_validate_indexer)
#     35287    0.270    0.000    0.478    0.000 base.py:640(_simple_new)
#        20    0.000    0.000    0.002    0.000 base.py:6574(delete)
#        10    0.000    0.000    0.006    0.001 base.py:6614(insert)
#        46    0.001    0.000    0.014    0.000 base.py:665(_with_infer)
#        20    0.000    0.000    0.022    0.001 base.py:6666(drop)
#       230    0.007    0.000    0.048    0.000 base.py:6740(_cmp_method)
#        12    0.000    0.000    0.003    0.000 base.py:6797(_construct_result)
#        12    0.000    0.000    0.010    0.001 base.py:6806(_arith_method)
#        28    0.000    0.000    0.000    0.000 base.py:683(_constructor)
#     68848    0.181    0.000    0.280    0.000 base.py:7072(ensure_index)
#         3    0.000    0.000    0.000    0.000 base.py:7143(trim_front)
#        12    0.000    0.000    0.000    0.000 base.py:7157(<genexpr>)
#         3    0.000    0.000    0.000    0.000 base.py:7158(<listcomp>)
#     36727    0.142    0.000    0.599    0.000 base.py:7167(maybe_extract_name)
#      5501    0.050    0.000    0.165    0.000 base.py:7183(get_unanimous_names)
#      5501    0.027    0.000    0.066    0.000 base.py:7196(<listcomp>)
#      5501    0.011    0.000    0.011    0.000 base.py:7197(<listcomp>)
#     11002    0.026    0.000    0.038    0.000 base.py:7198(<genexpr>)
#        80    0.001    0.000    0.001    0.000 base.py:7202(_unpack_nested_dtype)
#        20    0.000    0.000    0.000    0.000 base.py:7231(_maybe_try_sort)
#        20    0.000    0.000    0.000    0.000 base.py:743(_shallow_copy)
#     11143    0.052    0.000    0.206    0.000 base.py:760(_view)
#     11510    0.088    0.000    0.138    0.000 base.py:767(__iter__)
#      5531    0.015    0.000    0.121    0.000 base.py:769(_rename)
#     22556    0.058    0.000    0.084    0.000 base.py:778(is_)
#     49355    0.066    0.000    0.066    0.000 base.py:809(_reset_identity)
#      5848    0.087    0.000    0.252    0.000 base.py:820(_engine)
#    156393    0.317    0.000    0.472    0.000 base.py:875(__len__)
#         2    0.000    0.000    0.000    0.000 base.py:881(__array__)
#      6779    0.008    0.000    0.008    0.000 base.py:931(dtype)
#       219    0.001    0.000    0.005    0.000 base.py:953(view)
#       321    0.006    0.000    0.024    0.000 blocks.py:1011(setitem)
#         8    0.000    0.000    0.001    0.000 blocks.py:1505(delete)
#     27525    0.140    0.000    0.629    0.000 blocks.py:164(_consolidate_key)
#    103700    0.267    0.000    0.391    0.000 blocks.py:169(_can_hold_na)
#     26388    0.066    0.000    0.066    0.000 blocks.py:180(is_bool)
#         9    0.000    0.000    0.000    0.000 blocks.py:188(external_values)
#       390    0.002    0.000    0.027    0.000 blocks.py:192(fill_value)
#       321    0.001    0.000    0.002    0.000 blocks.py:198(_standardize_fill_value)
#    385517    0.385    0.000    0.385    0.000 blocks.py:205(mgr_locs)
#        10    0.000    0.000    0.000    0.000 blocks.py:2100(is_view)
#      2162    0.005    0.000    0.009    0.000 blocks.py:2109(get_values)
#         7    0.000    0.000    0.000    0.000 blocks.py:2114(values_for_json)
#     59945    0.199    0.000    2.783    0.000 blocks.py:213(make_block)
#     35479    0.105    0.000    0.105    0.000 blocks.py:230(make_block_same_class)
#    211074    1.225    0.000    2.720    0.000 blocks.py:2305(maybe_coerce_values)
#    179567    1.139    0.000    1.964    0.000 blocks.py:2334(get_block_type)
#     83691    0.423    0.000    2.402    0.000 blocks.py:2372(new_block_2d)
#     67455    0.549    0.000    2.924    0.000 blocks.py:2385(new_block)
#     67455    0.334    0.000    0.703    0.000 blocks.py:2401(check_ndim)
#    138790    0.667    0.000    1.170    0.000 blocks.py:2465(extend_blocks)
#     54819    0.259    0.000    0.568    0.000 blocks.py:2481(ensure_block_shape)
#         3    0.000    0.000    0.000    0.000 blocks.py:2497(to_native_types)
#         8    0.000    0.000    0.000    0.000 blocks.py:258(__len__)
#         9    0.000    0.000    0.000    0.000 blocks.py:2584(external_values)
#      3648    0.022    0.000    0.033    0.000 blocks.py:262(getitem_block)
#       307    0.001    0.000    0.001    0.000 blocks.py:301(should_store)
#        14    0.000    0.000    0.002    0.000 blocks.py:323(apply)
#        14    0.000    0.000    0.001    0.000 blocks.py:350(_split_op_result)
#    134292    0.152    0.000    0.152    0.000 blocks.py:479(dtype)
#     59928    0.583    0.000    7.444    0.000 blocks.py:483(astype)
#         3    0.000    0.000    0.001    0.000 blocks.py:528(to_native_types)
#     65616    0.166    0.000    0.166    0.000 blocks.py:534(copy)
#    174483    0.201    0.000    0.201    0.000 blocks.py:888(shape)
#     56388    0.118    0.000    0.118    0.000 blocks.py:892(iget)
#      3648    0.006    0.000    0.006    0.000 blocks.py:901(_slice)
#       307    0.002    0.000    0.002    0.000 blocks.py:908(set_inplace)
#       940    0.009    0.000    0.082    0.000 blocks.py:926(take_nd)
#     53506    0.343    0.000    1.860    0.000 cast.py:1171(maybe_infer_to_datetimelike)
#     81926    0.545    0.000    3.786    0.000 cast.py:123(maybe_convert_platform)
#     20329    0.096    0.000    0.313    0.000 cast.py:1388(np_find_common_type)
#     25819    0.103    0.000    0.180    0.000 cast.py:1429(find_common_type)
#       820    0.002    0.000    0.002    0.000 cast.py:1459(<genexpr>)
#       544    0.001    0.000    0.002    0.000 cast.py:1468(<genexpr>)
#       544    0.001    0.000    0.002    0.000 cast.py:1470(<genexpr>)
#       820    0.002    0.000    0.014    0.000 cast.py:1475(<genexpr>)
#        16    0.000    0.000    0.001    0.000 cast.py:1512(construct_1d_arraylike_from_scalar)
#     81950    0.415    0.000    0.713    0.000 cast.py:1573(construct_1d_object_array_from_listlike)
#        14    0.000    0.000    0.000    0.000 cast.py:1710(can_hold_element)
#       351    0.001    0.000    0.001    0.000 cast.py:1750(np_can_hold_element)
#         1    0.000    0.000    0.000    0.000 cast.py:540(ensure_dtype_can_hold_na)
#      7378    0.070    0.000    0.090    0.000 cast.py:566(maybe_promote)
#         2    0.000    0.000    0.000    0.000 cast.py:621(_maybe_promote_cached)
#         2    0.000    0.000    0.000    0.000 cast.py:629(_maybe_promote)
#       111    0.000    0.000    0.002    0.000 cast.py:767(infer_dtype_from)
#        42    0.001    0.000    0.001    0.000 cast.py:784(infer_dtype_from_scalar)
#        85    0.000    0.000    0.000    0.000 cast.py:891(infer_dtype_from_array)
#         2    0.000    0.000    0.000    0.000 codecs.py:186(__init__)
#       418    0.004    0.000    0.006    0.000 common.py:1029(is_numeric_v_string_like)
#     12772    0.036    0.000    0.054    0.000 common.py:1077(needs_i8_conversion)
#        84    0.001    0.000    0.002    0.000 common.py:108(_maybe_match_name)
#         1    0.000    0.000    0.000    0.000 common.py:1103(_maybe_memory_map)
#        74    0.000    0.000    0.000    0.000 common.py:112(ensure_python_int)
#     11103    0.054    0.000    0.196    0.000 common.py:1127(is_numeric_dtype)
#         2    0.000    0.000    0.001    0.001 common.py:1151(_is_binary_mode)
#       164    0.000    0.000    0.001    0.000 common.py:1168(<lambda>)
#         1    0.000    0.000    0.000    0.000 common.py:117(close)
#         1    0.000    0.000    0.001    0.001 common.py:1172(_get_binary_io_classes)
#      6938    0.041    0.000    0.176    0.000 common.py:1209(is_float_dtype)
#      6824    0.014    0.000    0.021    0.000 common.py:1240(<lambda>)
#      8394    0.057    0.000    0.189    0.000 common.py:1244(is_bool_dtype)
#    249321    0.493    0.000    0.748    0.000 common.py:1322(is_1d_only_ea_dtype)
#     77214    0.352    0.000    0.622    0.000 common.py:1335(is_extension_array_dtype)
#         1    0.000    0.000    0.000    0.000 common.py:134(__enter__)
#         1    0.000    0.000    0.000    0.000 common.py:137(__exit__)
#     47578    0.151    0.000    0.256    0.000 common.py:1389(is_ea_or_datetimelike_dtype)
#       110    0.000    0.000    0.001    0.000 common.py:1402(is_complex_dtype)
#         1    0.000    0.000    0.000    0.000 common.py:141(is_url)
#     67019    0.083    0.000    0.083    0.000 common.py:142(classes)
#     19724    0.070    0.000    0.192    0.000 common.py:1435(_is_dtype)
#     67019    0.143    0.000    0.214    0.000 common.py:144(<lambda>)
#    369026    0.765    0.000    1.166    0.000 common.py:1459(get_dtype)
#     23874    0.032    0.000    0.032    0.000 common.py:147(classes_and_not_datetimelike)
#     90893    0.351    0.000    0.794    0.000 common.py:1494(_is_dtype_type)
#    111406    0.239    0.000    0.348    0.000 common.py:150(cast_scalar_indexer)
#     23874    0.069    0.000    0.106    0.000 common.py:152(<lambda>)
#     59971    0.239    0.000    0.817    0.000 common.py:158(is_object_dtype)
#    144808    0.372    0.000    1.832    0.000 common.py:1631(validate_all_hashable)
#    289616    0.498    0.000    0.954    0.000 common.py:1650(<genexpr>)
#     71840    0.451    0.000    1.087    0.000 common.py:1656(pandas_dtype)
#         3    0.000    0.000    0.000    0.000 common.py:169(_expand_user)
#     10979    0.017    0.000    0.017    0.000 common.py:172(not_none)
#     76527    0.081    0.000    0.081    0.000 common.py:176(<genexpr>)
#         2    0.000    0.000    0.000    0.000 common.py:179(any_none)
#         4    0.000    0.000    0.000    0.000 common.py:183(<genexpr>)
#        37    0.000    0.000    0.000    0.000 common.py:186(all_none)
#        74    0.000    0.000    0.000    0.000 common.py:190(<genexpr>)
#        40    0.000    0.000    0.000    0.000 common.py:193(any_not_none)
#        80    0.000    0.000    0.000    0.000 common.py:197(<genexpr>)
#        38    0.000    0.000    0.001    0.000 common.py:207(count_not_none)
#       190    0.000    0.000    0.000    0.000 common.py:211(<genexpr>)
#        76    0.001    0.000    0.005    0.000 common.py:229(asarray_tuplesafe)
#         2    0.000    0.000    0.000    0.000 common.py:229(stringify_path)
#        20    0.000    0.000    0.001    0.000 common.py:261(index_labels_to_array)
#         1    0.000    0.000    0.000    0.000 common.py:273(is_fsspec_url)
#       347    0.001    0.000    0.001    0.000 common.py:275(is_datetime64_dtype)
#         1    0.000    0.000    0.000    0.000 common.py:285(_get_filepath_or_buffer)
#        80    0.000    0.000    0.000    0.000 common.py:290(maybe_make_list)
#    127328    0.549    0.000    2.048    0.000 common.py:296(maybe_iterable_to_list)
#       715    0.002    0.000    0.002    0.000 common.py:306(is_null_slice)
#       307    0.001    0.000    0.001    0.000 common.py:318(is_empty_slice)
#       307    0.001    0.000    0.001    0.000 common.py:338(is_full_slice)
#       354    0.001    0.000    0.001    0.000 common.py:351(is_timedelta64_dtype)
#      4912    0.011    0.000    0.016    0.000 common.py:367(apply_if_callable)
#        12    0.000    0.000    0.001    0.000 common.py:386(is_period_dtype)
#       102    0.000    0.000    0.004    0.000 common.py:422(is_interval_dtype)
#       216    0.001    0.000    0.007    0.000 common.py:460(is_categorical_dtype)
#     36416    0.046    0.000    0.046    0.000 common.py:498(is_string_or_object_np_dtype)
#         1    0.000    0.000    0.000    0.000 common.py:499(get_compression_method)
#         1    0.000    0.000    0.000    0.000 common.py:534(infer_compression)
#    170444    1.029    0.000    2.500    0.000 common.py:551(is_dtype_equal)
#     80277    0.247    0.000    0.744    0.000 common.py:571(require_length_match)
#         1    0.000    0.000    0.000    0.000 common.py:589(check_parent_directory)
#         1    0.000    0.000    0.002    0.002 common.py:648(get_handle)
#     12771    0.072    0.000    0.317    0.000 common.py:653(is_integer_dtype)
#   720/708    0.008    0.000    0.446    0.001 common.py:67(new_method)
#     12716    0.026    0.000    0.038    0.000 common.py:705(<lambda>)
#       520    0.002    0.000    0.012    0.000 common.py:86(get_op_result_name)
#        20    0.000    0.000    0.000    0.000 common.py:909(is_datetime64_ns_dtype)
#      1273    0.008    0.000    0.042    0.000 common.py:95(is_bool_indexer)
#        20    0.000    0.000    0.000    0.000 common.py:958(is_timedelta64_ns_dtype)
#        20    0.000    0.000    0.000    0.000 common.py:987(<lambda>)
#     10979    0.149    0.000   48.441    0.004 concat.py:149(concat)
#      5531    0.900    0.000   26.038    0.005 concat.py:176(concatenate_managers)
#      5511    0.047    0.000    4.211    0.001 concat.py:208(<listcomp>)
#     34539    0.052    0.000    0.052    0.000 concat.py:226(<listcomp>)
#        20    0.001    0.000    0.003    0.000 concat.py:255(_concat_managers_axis0)
#        20    0.000    0.000    0.000    0.000 concat.py:262(<dictcomp>)
#        20    0.000    0.000    0.000    0.000 concat.py:267(<listcomp>)
#      5531    0.047    0.000    0.077    0.000 concat.py:293(_maybe_reindex_columns_na_proxy)
#     11028    2.076    0.000    4.164    0.000 concat.py:322(_get_mgr_concatenation_plan)
#     20084    0.546    0.000    2.430    0.000 concat.py:33(concat_compat)
#     10979    1.152    0.000   12.245    0.001 concat.py:393(__init__)
#    109180    0.153    0.000    0.153    0.000 concat.py:399(__init__)
#     40096    0.162    0.000    0.298    0.000 concat.py:411(needs_filling)
#     40096    0.128    0.000    0.426    0.000 concat.py:420(dtype)
#     40092    0.139    0.000    0.582    0.000 concat.py:430(_is_valid_na_for)
#     27303    0.074    0.000    0.272    0.000 concat.py:442(<genexpr>)
#    109180    0.973    0.000    5.129    0.000 concat.py:460(is_na)
#     10979    0.170    0.000    0.868    0.000 concat.py:480(<listcomp>)
#     72640    0.203    0.000    2.441    0.000 concat.py:487(<genexpr>)
#     40100    0.555    0.000    2.456    0.000 concat.py:489(get_reindexed_values)
#     40174    0.057    0.000    0.057    0.000 concat.py:55(is_nonempty)
#     10979    0.329    0.000   36.039    0.003 concat.py:565(get_result)
#     20048    0.329    0.000    7.144    0.000 concat.py:572(_concatenate_join_units)
#     60148    0.075    0.000    0.075    0.000 concat.py:578(<genexpr>)
#     20048    0.158    0.000    2.613    0.000 concat.py:581(<listcomp>)
#     60148    0.116    0.000    0.236    0.000 concat.py:598(<genexpr>)
#     20048    0.059    0.000    0.084    0.000 concat.py:618(_dtype_to_na_value)
#     10979    0.021    0.000    0.027    0.000 concat.py:625(_get_result_dim)
#     10979    0.060    0.000    8.056    0.001 concat.py:631(_get_new_axes)
#     10979    0.085    0.000    7.969    0.001 concat.py:633(<listcomp>)
#     10979    0.064    0.000    2.380    0.000 concat.py:638(_get_comb_axis)
#     20048    0.226    0.000    1.157    0.000 concat.py:641(_get_empty_dtype)
#     10979    0.326    0.000    5.505    0.001 concat.py:648(_get_concat_axis)
#     60148    0.078    0.000    0.078    0.000 concat.py:659(<genexpr>)
#     20084    0.080    0.000    0.137    0.000 concat.py:66(<listcomp>)
#     20048    0.076    0.000    0.411    0.000 concat.py:661(<listcomp>)
#        32    0.000    0.000    0.001    0.000 concat.py:663(<listcomp>)
#     54587    0.477    0.000    9.521    0.000 concat.py:671(_is_uniform_join_units)
#      5531    0.025    0.000    0.043    0.000 concat.py:682(<listcomp>)
#    163765    0.224    0.000    0.224    0.000 concat.py:683(<genexpr>)
#    163738    0.512    0.000    2.169    0.000 concat.py:686(<genexpr>)
#    163697    0.457    0.000    5.585    0.000 concat.py:696(<genexpr>)
#    116373    0.131    0.000    0.131    0.000 concat.py:699(<genexpr>)
#      5531    0.009    0.000    0.009    0.000 concat.py:701(_maybe_check_integrity)
#     20048    0.075    0.000    0.166    0.000 concat.py:706(_is_uniform_reindex)
#      5531    0.021    0.000    2.580    0.000 concat.py:708(_concat_indexes)
#     40096    0.048    0.000    0.048    0.000 concat.py:709(<genexpr>)
#     20084    0.035    0.000    0.035    0.000 concat.py:71(<setcomp>)
#      6364    0.059    0.000    0.138    0.000 concat.py:714(_trim_join_unit)
#     20084    0.030    0.000    0.030    0.000 concat.py:72(<setcomp>)
#     40174    0.076    0.000    0.104    0.000 concat.py:73(<genexpr>)
#     60098    0.917    0.000    1.877    0.000 concat.py:741(_combine_concat_plans)
#    113844    0.275    0.000    0.411    0.000 concat.py:757(_next_or_none)
#     60251    0.105    0.000    0.440    0.000 concat.py:76(<genexpr>)
#     20084    0.028    0.000    0.028    0.000 concat.py:79(<setcomp>)
#     60251    0.106    0.000    0.148    0.000 concat.py:80(<genexpr>)
#     21732    0.184    0.000    0.605    0.000 config.py:116(_get_single_key)
#     21572    0.105    0.000    0.832    0.000 config.py:134(_get_option)
#       160    0.002    0.000    0.007    0.000 config.py:142(_set_option)
#     21492    0.067    0.000    0.897    0.000 config.py:260(__call__)
#        80    0.000    0.000    0.001    0.000 config.py:432(__init__)
#        80    0.001    0.000    0.006    0.000 config.py:440(__enter__)
#        80    0.000    0.000    0.002    0.000 config.py:441(<listcomp>)
#        80    0.000    0.000    0.004    0.000 config.py:446(__exit__)
#     21732    0.037    0.000    0.180    0.000 config.py:578(_select_options)
#       136    0.014    0.000    0.141    0.001 config.py:593(<listcomp>)
#     21732    0.084    0.000    0.126    0.000 config.py:596(_get_root)
#     43224    0.080    0.000    0.080    0.000 config.py:610(_get_deprecated_option)
#       160    0.000    0.000    0.001    0.000 config.py:626(_get_registered_option)
#     21732    0.051    0.000    0.082    0.000 config.py:637(_translate_key)
#     21492    0.059    0.000    0.108    0.000 config.py:649(_warn_if_deprecated)
#       165    0.000    0.000    0.000    0.000 config.py:860(is_nonnegative_int)
#     12804    0.043    0.000    0.063    0.000 construction.py:197(mgr_to_mgr)
#        26    0.001    0.000    0.009    0.000 construction.py:238(ndarray_to_mgr)
#        22    0.000    0.000    0.003    0.000 construction.py:367(<listcomp>)
#        88    0.000    0.000    0.000    0.000 construction.py:369(<genexpr>)
#        26    0.000    0.000    0.000    0.000 construction.py:393(_check_values_indices_shape_match)
#    105299    0.348    0.000    2.751    0.000 construction.py:396(extract_array)
#     12744    0.252    0.000   32.298    0.003 construction.py:411(dict_to_mgr)
#    275849    0.802    0.000    1.134    0.000 construction.py:458(ensure_wrapped_if_datetimelike)
#     12744    0.188    0.000    2.235    0.000 construction.py:469(<listcomp>)
#     12744    0.151    0.000    0.281    0.000 construction.py:470(<listcomp>)
#      7296    0.086    0.000    0.158    0.000 construction.py:476(<listcomp>)
#    104088    2.867    0.000   15.815    0.000 construction.py:494(sanitize_array)
#         6    0.000    0.000    0.000    0.000 construction.py:510(treat_as_nested)
#         6    0.000    0.000    0.001    0.000 construction.py:525(_prep_ndarraylike)
#         6    0.000    0.000    0.001    0.000 construction.py:537(convert)
#        26    0.000    0.000    0.000    0.000 construction.py:563(_ensure_2d)
#     12744    1.002    0.000   14.882    0.001 construction.py:574(_homogenize)
#      7296    0.764    0.000    2.088    0.000 construction.py:616(_extract_index)
#     91086    0.189    0.000    0.288    0.000 construction.py:636(_sanitize_non_ordered)
#    104072    0.428    0.000    1.267    0.000 construction.py:644(_sanitize_ndim)
#    104060    0.262    0.000    0.383    0.000 construction.py:683(_sanitize_str_dtypes)
#    104072    0.268    0.000    0.695    0.000 construction.py:703(_maybe_repeat)
#      5934    0.047    0.000    0.189    0.000 construction.py:714(_try_cast)
#        26    0.000    0.000    0.001    0.000 construction.py:724(_get_axes)
#        20    0.001    0.000    0.004    0.000 construction.py:74(array)
#     12744    0.189    0.000   25.240    0.002 construction.py:97(arrays_to_mgr)
#       106    0.000    0.000    0.001    0.000 contextlib.py:108(__enter__)
#       106    0.000    0.000    0.001    0.000 contextlib.py:117(__exit__)
#       106    0.000    0.000    0.001    0.000 contextlib.py:238(helper)
#       322    0.000    0.000    0.000    0.000 contextlib.py:353(__init__)
#       322    0.000    0.000    0.000    0.000 contextlib.py:356(__enter__)
#       322    0.001    0.000    0.001    0.000 contextlib.py:359(__exit__)
#       106    0.000    0.000    0.001    0.000 contextlib.py:82(__init__)
#   1922/65    0.018    0.000    0.046    0.001 copy.py:128(deepcopy)
#      1534    0.002    0.000    0.002    0.000 copy.py:182(_deepcopy_atomic)
#        11    0.000    0.000    0.031    0.003 copy.py:200(_deepcopy_list)
#    106/35    0.004    0.000    0.037    0.001 copy.py:226(_deepcopy_dict)
#       388    0.001    0.000    0.002    0.000 copy.py:242(_keep_alive)
#     82/11    0.001    0.000    0.033    0.003 copy.py:258(_reconstruct)
#       164    0.000    0.000    0.002    0.000 copy.py:263(<genexpr>)
#      4540    0.022    0.000    0.036    0.000 copy.py:66(copy)
#        82    0.000    0.000    0.000    0.000 copyreg.py:90(__newobj__)
#         1    0.000    0.000    0.000    0.000 csvs.py:1(<module>)
#         3    0.000    0.000    0.000    0.000 csvs.py:100(decimal)
#         3    0.000    0.000    0.000    0.000 csvs.py:104(header)
#         2    0.000    0.000    0.000    0.000 csvs.py:108(index)
#         1    0.000    0.000    0.000    0.000 csvs.py:112(_initialize_index_label)
#         1    0.000    0.000    0.000    0.000 csvs.py:121(_get_index_label_from_obj)
#         1    0.000    0.000    0.000    0.000 csvs.py:130(_get_index_label_flat)
#         1    0.000    0.000    0.000    0.000 csvs.py:134(_initialize_quotechar)
#         3    0.000    0.000    0.000    0.000 csvs.py:140(has_mi_columns)
#         1    0.000    0.000    0.000    0.000 csvs.py:144(_initialize_columns)
#         1    0.000    0.000    0.000    0.000 csvs.py:163(_initialize_chunksize)
#         3    0.000    0.000    0.000    0.000 csvs.py:168(_number_format)
#         1    0.000    0.000    0.000    0.000 csvs.py:179(data_index)
#         1    0.000    0.000    0.000    0.000 csvs.py:193(nlevels)
#         2    0.000    0.000    0.000    0.000 csvs.py:200(_has_aliases)
#         1    0.000    0.000    0.000    0.000 csvs.py:204(_need_to_save_header)
#         1    0.000    0.000    0.000    0.000 csvs.py:208(write_cols)
#         1    0.000    0.000    0.000    0.000 csvs.py:222(encoded_labels)
#         1    0.000    0.000    0.004    0.004 csvs.py:235(save)
#         1    0.000    0.000    0.002    0.002 csvs.py:261(_save)
#         1    0.000    0.000    0.000    0.000 csvs.py:266(_save_header)
#         1    0.000    0.000    0.001    0.001 csvs.py:294(_save_body)
#         1    0.000    0.000    0.001    0.001 csvs.py:304(_save_chunk)
#         1    0.000    0.000    0.000    0.000 csvs.py:310(<listcomp>)
#         1    0.000    0.000    0.000    0.000 csvs.py:47(CSVFormatter)
#         1    0.000    0.000    0.000    0.000 csvs.py:50(__init__)
#         3    0.000    0.000    0.000    0.000 csvs.py:92(na_rep)
#         3    0.000    0.000    0.000    0.000 csvs.py:96(float_format)
#         6    0.000    0.000    0.000    0.000 dataclasses.py:1045(is_dataclass)
#        12    0.000    0.000    0.000    0.000 datetimelike.py:1002(_get_i8_values_and_mask)
#        12    0.000    0.000    0.001    0.000 datetimelike.py:1021(_get_arithmetic_result_freq)
#        12    0.000    0.000    0.004    0.000 datetimelike.py:1149(_add_timedeltalike_scalar)
#        12    0.000    0.000    0.003    0.000 datetimelike.py:1187(_add_timedeltalike)
#        12    0.000    0.000    0.004    0.000 datetimelike.py:1313(__add__)
#        12    0.000    0.000    0.000    0.000 datetimelike.py:1872(freq)
#        50    0.000    0.000    0.000    0.000 datetimelike.py:1941(_creso)
#        12    0.000    0.000    0.000    0.000 datetimelike.py:1945(unit)
#        12    0.000    0.000    0.000    0.000 datetimelike.py:1973(_ensure_matching_resos)
#        38    0.000    0.000    0.000    0.000 datetimelike.py:2160(validate_periods)
#        12    0.000    0.000    0.000    0.000 datetimelike.py:2252(dtype_to_unit)
#        62    0.000    0.000    0.000    0.000 datetimelike.py:307(asi8)
#        12    0.000    0.000    0.000    0.000 datetimelike.py:826(_isnan)
#        38    0.000    0.000    0.001    0.000 datetimes.py:2400(_infer_tz_from_endpoints)
#        38    0.000    0.000    0.000    0.000 datetimes.py:2443(_maybe_normalize_endpoints)
#        24    0.000    0.000    0.001    0.000 datetimes.py:2489(_generate_range)
#        50    0.001    0.000    0.001    0.000 datetimes.py:268(_simple_new)
#        38    0.003    0.000    0.019    0.001 datetimes.py:374(_generate_range)
#        12    0.000    0.000    0.001    0.000 datetimes.py:451(<listcomp>)
#       134    0.000    0.000    0.000    0.000 datetimes.py:533(dtype)
#        38    0.000    0.000    0.000    0.000 datetimes.py:558(tz)
#        80    0.001    0.000    0.002    0.000 datetimes.py:607(__iter__)
#        12    0.000    0.000    0.000    0.000 datetimes.py:636(astype)
#        38    0.001    0.000    0.021    0.001 datetimes.py:758(date_range)
#        38    0.000    0.000    0.000    0.000 datetimes.py:96(tz_to_dtype)
#       485    0.002    0.000    0.009    0.000 dispatch.py:13(should_extension_dispatch)
#       102    0.001    0.000    0.003    0.000 dtypes.py:1241(is_dtype)
#        20    0.000    0.000    0.000    0.000 dtypes.py:1324(__init__)
#        20    0.000    0.000    0.000    0.000 dtypes.py:1359(_is_boolean)
#        20    0.000    0.000    0.000    0.000 dtypes.py:1388(kind)
#        12    0.000    0.000    0.000    0.000 dtypes.py:974(is_dtype)
#         4    0.000    0.000    0.000    0.000 enum.py:289(__call__)
#         4    0.000    0.000    0.000    0.000 enum.py:586(__new__)
#      9520    0.010    0.000    0.010    0.000 enum.py:689(value)
#         2    0.000    0.000    0.000    0.000 enum.py:858(__and__)
#        37    0.000    0.000    0.001    0.000 expressions.py:223(evaluate)
#        37    0.000    0.000    0.000    0.000 expressions.py:64(_evaluate_standard)
#    152694    0.259    0.000    0.259    0.000 flags.py:49(__init__)
#    195381    0.201    0.000    0.201    0.000 flags.py:53(allows_duplicate_labels)
#    134385    0.271    0.000    0.271    0.000 flags.py:85(allows_duplicate_labels)
#        81    0.000    0.000    0.000    0.000 format.py:1025(__init__)
#        80    0.001    0.000    0.300    0.004 format.py:1111(to_string)
#         1    0.000    0.000    0.005    0.005 format.py:1137(to_csv)
#        80    0.001    0.000    0.003    0.000 format.py:1197(save_to_buffer)
#       160    0.000    0.000    0.001    0.000 format.py:1213(get_buffer)
#        75    0.002    0.000    0.046    0.001 format.py:1251(format_array)
#        75    0.000    0.000    0.000    0.000 format.py:1334(__init__)
#        75    0.001    0.000    0.033    0.000 format.py:1362(get_result)
#        72    0.002    0.000    0.022    0.000 format.py:1366(_format_strings)
#        12    0.000    0.000    0.000    0.000 format.py:1371(<lambda>)
#        60    0.001    0.000    0.003    0.000 format.py:1389(_format)
#         3    0.000    0.000    0.000    0.000 format.py:1618(_format_strings)
#         3    0.000    0.000    0.000    0.000 format.py:1622(<lambda>)
#         3    0.000    0.000    0.000    0.000 format.py:1624(<listcomp>)
#       159    0.002    0.000    0.017    0.000 format.py:1915(_make_fixed_width)
#       318    0.001    0.000    0.001    0.000 format.py:1929(<genexpr>)
#       159    0.000    0.000    0.000    0.000 format.py:1938(just)
#       159    0.000    0.000    0.001    0.000 format.py:1944(<listcomp>)
#        12    0.000    0.000    0.000    0.000 format.py:1974(_trim_zeros_single_float)
#        36    0.000    0.000    0.000    0.000 format.py:2022(_has_names)
#       156    0.000    0.000    0.005    0.000 format.py:425(__init__)
#       447    0.001    0.000    0.001    0.000 format.py:428(len)
#       327    0.001    0.000    0.003    0.000 format.py:431(justify)
#        24    0.000    0.000    0.004    0.000 format.py:434(adjoin)
#       156    0.001    0.000    0.011    0.000 format.py:479(get_adjustment)
#        81    0.002    0.000    0.015    0.000 format.py:564(__init__)
#        12    0.000    0.000    0.111    0.009 format.py:611(get_strcols)
#        80    0.000    0.000    0.000    0.000 format.py:623(should_show_dimensions)
#        12    0.000    0.000    0.000    0.000 format.py:629(is_truncated)
#        93    0.000    0.000    0.000    0.000 format.py:633(is_truncated_horizontally)
#        93    0.000    0.000    0.000    0.000 format.py:637(is_truncated_vertically)
#        24    0.000    0.000    0.000    0.000 format.py:645(has_index_names)
#        12    0.000    0.000    0.000    0.000 format.py:649(has_column_names)
#        24    0.000    0.000    0.000    0.000 format.py:653(show_row_idx_names)
#        12    0.000    0.000    0.000    0.000 format.py:657(show_col_idx_names)
#        81    0.000    0.000    0.003    0.000 format.py:665(_initialize_sparsify)
#        81    0.000    0.000    0.000    0.000 format.py:670(_initialize_formatters)
#        81    0.000    0.000    0.003    0.000 format.py:683(_initialize_justify)
#        81    0.000    0.000    0.000    0.000 format.py:689(_initialize_columns)
#        81    0.000    0.000    0.000    0.000 format.py:699(_initialize_colspace)
#        81    0.000    0.000    0.000    0.000 format.py:723(_calc_max_cols_fitted)
#        81    0.000    0.000    0.001    0.000 format.py:734(_calc_max_rows_fitted)
#        81    0.000    0.000    0.000    0.000 format.py:753(_adjust_max_rows)
#       162    0.000    0.000    0.000    0.000 format.py:767(_is_in_terminal)
#        81    0.000    0.000    0.001    0.000 format.py:791(truncate)
#        12    0.002    0.000    0.107    0.009 format.py:845(_get_strcols_without_index)
#       144    0.000    0.000    0.001    0.000 format.py:879(<genexpr>)
#       144    0.000    0.000    0.000    0.000 format.py:886(<genexpr>)
#        72    0.001    0.000    0.083    0.001 format.py:892(format_col)
#       156    0.001    0.000    0.004    0.000 format.py:905(_get_formatter)
#        12    0.000    0.000    0.015    0.001 format.py:917(_get_formatted_column_labels)
#        12    0.000    0.000    0.002    0.000 format.py:951(<listcomp>)
#        12    0.000    0.000    0.004    0.000 format.py:958(_get_formatted_index)
#        12    0.000    0.000    0.000    0.000 format.py:961(<dictcomp>)
#        12    0.000    0.000    0.001    0.000 format.py:976(<listcomp>)
#       242    0.001    0.000    0.082    0.000 frame.py:11286(values)
#        16    0.000    0.000    0.000    0.000 frame.py:11602(_reindex_for_setitem)
#        80    0.002    0.000    0.329    0.004 frame.py:1190(to_string)
#     59938    0.244    0.000    6.983    0.000 frame.py:1345(items)
#      1713    0.016    0.000    0.657    0.000 frame.py:1354(iterrows)
#      6912    0.017    0.000    0.054    0.000 frame.py:1489(__len__)
#        14    0.000    0.000    0.015    0.001 frame.py:3466(transpose)
#        14    0.000    0.000    0.015    0.001 frame.py:3607(T)
#     55602    0.525    0.000    5.570    0.000 frame.py:3639(_ixs)
#      1071    0.018    0.000    0.234    0.000 frame.py:3713(__getitem__)
#       120    0.002    0.000    0.110    0.001 frame.py:3786(_getitem_bool_array)
#       458    0.003    0.000    0.061    0.000 frame.py:3847(_get_value)
#        40    0.001    0.000    0.091    0.002 frame.py:3921(__setitem__)
#         8    0.000    0.000    0.068    0.009 frame.py:3959(_setitem_array)
#        22    0.000    0.000    0.004    0.000 frame.py:4101(_iset_item_mgr)
#        32    0.000    0.000    0.015    0.000 frame.py:4108(_set_item_mgr)
#        32    0.000    0.000    0.022    0.001 frame.py:4133(_set_item)
#        32    0.000    0.000    0.000    0.000 frame.py:4203(_ensure_valid_index)
#     55543    0.461    0.000    2.874    0.000 frame.py:4226(_box_col_values)
#     17913    0.041    0.000    0.060    0.000 frame.py:4240(_clear_item_cache)
#     55398    0.584    0.000    6.722    0.000 frame.py:4243(_get_item_cache)
#         6    0.000    0.000    0.000    0.000 frame.py:4264(_reset_cacher)
#        32    0.000    0.000    0.006    0.000 frame.py:4847(_sanitize_column)
#        14    0.000    0.000    0.008    0.001 frame.py:5036(reindex)
#        20    0.000    0.000    0.043    0.002 frame.py:5110(drop)
#      6427    0.097    0.000    0.624    0.000 frame.py:5976(reset_index)
#     11455    0.012    0.000    0.012    0.000 frame.py:632(_constructor)
#     24247    0.470    0.000   34.879    0.001 frame.py:641(__init__)
#         1    0.000    0.000    0.005    0.005 frame.py:6435(drop_duplicates)
#         1    0.000    0.000    0.004    0.004 frame.py:6532(duplicated)
#         9    0.000    0.000    0.002    0.000 frame.py:6629(f)
#        10    0.000    0.000    0.002    0.000 frame.py:6661(<genexpr>)
#         6    0.000    0.000    0.003    0.001 frame.py:7448(_arith_method)
#        13    0.000    0.000    0.004    0.000 frame.py:7462(_dispatch_frame_op)
#        13    0.000    0.000    0.002    0.000 frame.py:7557(_construct_result)
#     23750    0.042    0.000    0.042    0.000 frame.py:893(axes)
#     17990    0.069    0.000    0.266    0.000 frame.py:910(shape)
#        14    0.000    0.000    0.000    0.000 frame.py:970(_can_fast_transpose)
#        14    0.000    0.000    0.000    0.000 frame.py:985(_values)
#      9105    0.011    0.000    0.011    0.000 fromnumeric.py:1034(_argsort_dispatcher)
#      9105    0.031    0.000    0.124    0.000 fromnumeric.py:1038(argsort)
#        12    0.000    0.000    0.000    0.000 fromnumeric.py:1574(_diagonal_dispatcher)
#        12    0.000    0.000    0.000    0.000 fromnumeric.py:1578(diagonal)
#        20    0.000    0.000    0.000    0.000 fromnumeric.py:1777(_ravel_dispatcher)
#        20    0.000    0.000    0.000    0.000 fromnumeric.py:1781(ravel)
#       124    0.000    0.000    0.000    0.000 fromnumeric.py:2427(_all_dispatcher)
#       124    0.001    0.000    0.004    0.000 fromnumeric.py:2432(all)
#         8    0.000    0.000    0.000    0.000 fromnumeric.py:2698(_amax_dispatcher)
#         8    0.000    0.000    0.000    0.000 fromnumeric.py:2703(amax)
#         1    0.000    0.000    0.000    0.000 fromnumeric.py:2950(_prod_dispatcher)
#         1    0.000    0.000    0.000    0.000 fromnumeric.py:2955(prod)
#      9105    0.036    0.000    0.093    0.000 fromnumeric.py:51(_wrapfunc)
#       133    0.001    0.000    0.003    0.000 fromnumeric.py:69(_wrapreduction)
#       133    0.000    0.000    0.000    0.000 fromnumeric.py:70(<dictcomp>)
#        20    0.000    0.000    0.000    0.000 fromnumeric.py:874(_sort_dispatcher)
#        20    0.000    0.000    0.000    0.000 fromnumeric.py:878(sort)
#      5531    0.028    0.000    0.042    0.000 frozen.py:73(__getitem__)
#        33    0.000    0.000    0.000    0.000 function.py:60(__call__)
#        12    0.000    0.000    0.000    0.000 function_base.py:346(iterable)
#        20    0.000    0.000    0.000    0.000 function_base.py:5050(_delete_dispatcher)
#        20    0.001    0.000    0.001    0.000 function_base.py:5054(delete)
#        10    0.000    0.000    0.000    0.000 function_base.py:5246(_insert_dispatcher)
#        10    0.000    0.000    0.001    0.000 function_base.py:5250(insert)
#        20    0.000    0.000    0.000    0.000 function_base.py:5440(_append_dispatcher)
#        20    0.000    0.000    0.001    0.000 function_base.py:5444(append)
#        36    0.001    0.000    0.041    0.001 generate_date_sequence.py:4(generate_date_sequence)
#        36    0.001    0.000    0.003    0.000 generate_date_sequence.py:40(<listcomp>)
#         7    0.000    0.000    0.003    0.000 generic.py:11240(_min_count_stat_function)
#         7    0.000    0.000    0.003    0.000 generic.py:11272(sum)
#         7    0.000    0.000    0.003    0.000 generic.py:11493(sum)
#        12    0.000    0.000    0.010    0.001 generic.py:11760(_inplace_method)
#        12    0.000    0.000    0.010    0.001 generic.py:11790(__iadd__)
#         6    0.000    0.000    0.000    0.000 generic.py:1329(_indexed_same)
#        12    0.000    0.000    0.000    0.000 generic.py:1331(<genexpr>)
#         1    0.000    0.000    0.000    0.000 generic.py:1422(__neg__)
#         1    0.000    0.000    0.000    0.000 generic.py:1424(blk_func)
#       240    0.002    0.000    0.004    0.000 generic.py:1607(_is_level_reference)
#       180    0.002    0.000    0.005    0.000 generic.py:1638(_is_label_reference)
#       360    0.000    0.000    0.000    0.000 generic.py:1660(<genexpr>)
#       360    0.001    0.000    0.003    0.000 generic.py:1665(<genexpr>)
#        60    0.000    0.000    0.003    0.000 generic.py:1668(_is_label_or_level_reference)
#       120    0.001    0.000    0.002    0.000 generic.py:1693(_check_label_or_level_ambiguity)
#       120    0.000    0.000    0.000    0.000 generic.py:1714(<genexpr>)
#       120    0.002    0.000    0.029    0.000 generic.py:1737(_get_label_or_level_values)
#       120    0.000    0.000    0.000    0.000 generic.py:1770(<listcomp>)
#        20    0.000    0.000    0.051    0.003 generic.py:1798(_drop_labels_or_levels)
#        20    0.000    0.000    0.003    0.000 generic.py:1829(<listcomp>)
#        20    0.000    0.000    0.001    0.000 generic.py:1840(<listcomp>)
#        20    0.000    0.000    0.001    0.000 generic.py:1842(<listcomp>)
#        24    0.000    0.000    0.001    0.000 generic.py:1882(__iter__)
#     54649    0.187    0.000    0.840    0.000 generic.py:1924(__contains__)
#       158    0.001    0.000    0.005    0.000 generic.py:1929(empty)
#       378    0.001    0.000    0.003    0.000 generic.py:1987(<genexpr>)
#         5    0.000    0.000    0.001    0.000 generic.py:2262(to_json)
#    152694    0.747    0.000    1.006    0.000 generic.py:265(__init__)
#        34    0.000    0.000    0.005    0.000 generic.py:283(_init_mgr)
#    188954    0.228    0.000    0.228    0.000 generic.py:338(attrs)
#         1    0.000    0.000    0.005    0.005 generic.py:3589(to_csv)
#    329766    0.351    0.000    0.351    0.000 generic.py:359(flags)
#   1251210    2.739    0.000    4.084    0.000 generic.py:37(_check)
#        40    0.000    0.000    0.001    0.000 generic.py:3800(_maybe_update_cacher)
#       204    0.004    0.000    0.160    0.001 generic.py:3911(_take)
#       204    0.002    0.000    0.180    0.001 generic.py:3940(_take_with_is_copy)
#       140    0.002    0.000    0.025    0.000 generic.py:3954(xs)
#        97    0.002    0.000    0.011    0.000 generic.py:4136(_slice)
#       360    0.001    0.000    0.002    0.000 generic.py:4153(_set_is_copy)
#        14    0.000    0.000    0.001    0.000 generic.py:4161(_check_is_chained_assignment_possible)
#        88    0.000    0.000    0.002    0.000 generic.py:4176(_check_setitem_copy)
#   1251210    3.125    0.000    7.433    0.000 generic.py:42(_instancecheck)
#      6427    0.024    0.000    0.037    0.000 generic.py:4291(_check_inplace_and_allows_duplicate_labels)
#        10    0.000    0.000    0.000    0.000 generic.py:4358(_is_view)
#         6    0.000    0.000    0.001    0.000 generic.py:4364(reindex_like)
#        20    0.000    0.000    0.043    0.002 generic.py:4518(drop)
#     11382    0.037    0.000    0.685    0.000 generic.py:453(_validate_dtype)
#        20    0.001    0.000    0.042    0.002 generic.py:4557(_drop_axis)
#        26    0.000    0.000    0.001    0.000 generic.py:4644(_update_inplace)
#        14    0.000    0.000    0.000    0.000 generic.py:500(_construct_axes_dict)
#        14    0.000    0.000    0.000    0.000 generic.py:503(<dictcomp>)
#    101839    0.121    0.000    0.121    0.000 generic.py:509(_get_axis_number)
#      5462    0.058    0.000    1.673    0.000 generic.py:5106(reindex)
#        20    0.000    0.000    0.000    0.000 generic.py:517(_get_axis_name)
#     73167    0.202    0.000    0.284    0.000 generic.py:523(_get_axis)
#     16811    0.046    0.000    0.067    0.000 generic.py:529(_get_block_manager_axis)
#     10930    0.039    0.000    0.705    0.000 generic.py:5348(<genexpr>)
#        52    0.000    0.000    0.009    0.000 generic.py:5559(head)
#    134425    1.850    0.000    4.926    0.000 generic.py:5931(__finalize__)
#     65548    0.140    0.000    0.202    0.000 generic.py:5963(<genexpr>)
#     76527    0.232    0.000    0.367    0.000 generic.py:5968(<genexpr>)
#     76142    0.180    0.000    0.437    0.000 generic.py:5975(__getattr__)
#     63001    0.128    0.000    0.204    0.000 generic.py:599(_info_axis)
# 201701/201671    0.800    0.000    3.079    0.000 generic.py:5991(__setattr__)
#      5474    0.049    0.000    2.852    0.001 generic.py:6130(dtypes)
# 59928/5448    1.773    0.000   50.642    0.009 generic.py:6161(astype)
#     28671    0.034    0.000    0.034    0.000 generic.py:623(ndim)
#      5550    0.068    0.000    0.869    0.000 generic.py:6342(copy)
#        30    0.000    0.000    0.006    0.000 generic.py:6460(__deepcopy__)
#     30338    0.179    0.000    1.012    0.000 generic.py:723(_set_axis)
#         8    0.000    0.000    0.005    0.001 generic.py:9040(rank)
#         8    0.000    0.000    0.005    0.001 generic.py:9155(ranker)
#       555    0.003    0.000    0.005    0.000 genericpath.py:121(_splitext)
#   741/729    0.011    0.000    0.366    0.001 indexing.py:1089(__getitem__)
#      1572    0.003    0.000    0.004    0.000 indexing.py:1093(<genexpr>)
#      1572    0.004    0.000    0.007    0.000 indexing.py:1094(<genexpr>)
#       134    0.001    0.000    0.135    0.001 indexing.py:1117(_getbool_axis)
#       100    0.001    0.000    0.001    0.000 indexing.py:1138(_validate_key)
#        32    0.000    0.000    0.000    0.000 indexing.py:1160(_has_valid_setitem_indexer)
#        60    0.001    0.000    0.001    0.000 indexing.py:1163(_is_scalar_access)
#        40    0.000    0.000    0.003    0.000 indexing.py:1197(_multi_take_opportunity)
#       120    0.000    0.000    0.001    0.000 indexing.py:1215(<genexpr>)
#        68    0.000    0.000    0.002    0.000 indexing.py:1219(<genexpr>)
#        60    0.001    0.000    0.095    0.002 indexing.py:1277(_getitem_tuple)
#        20    0.000    0.000    0.006    0.000 indexing.py:1291(_get_label)
#       118    0.002    0.000    0.095    0.001 indexing.py:1309(_getitem_axis)
#        64    0.001    0.000    0.013    0.000 indexing.py:1364(_convert_to_indexer)
#       496    0.003    0.000    0.020    0.000 indexing.py:1478(_validate_key)
#       952    0.002    0.000    0.002    0.000 indexing.py:148(iloc)
#       225    0.004    0.000    0.011    0.000 indexing.py:1520(_has_valid_setitem_indexer)
#       464    0.003    0.000    0.009    0.000 indexing.py:1556(_is_scalar_access)
#      1210    0.002    0.000    0.003    0.000 indexing.py:1569(<genexpr>)
#       524    0.002    0.000    0.008    0.000 indexing.py:1571(_validate_integer)
#       230    0.003    0.000    0.149    0.001 indexing.py:1593(_getitem_tuple)
#       423    0.006    0.000    0.128    0.000 indexing.py:1623(_getitem_axis)
#        55    0.000    0.000    0.008    0.000 indexing.py:1660(_get_slice_axis)
#       225    0.001    0.000    0.001    0.000 indexing.py:1677(_get_setitem_indexer)
#       257    0.011    0.000    0.207    0.001 indexing.py:1689(_setitem_with_indexer)
#       243    0.007    0.000    0.180    0.001 indexing.py:1839(_setitem_with_indexer_split_path)
#        21    0.001    0.000    0.073    0.003 indexing.py:1952(_setitem_with_indexer_frame_value)
#       307    0.005    0.000    0.101    0.000 indexing.py:2001(_setitem_single_column)
#        14    0.000    0.000    0.004    0.000 indexing.py:2038(_setitem_single_block)
#       264    0.003    0.000    0.011    0.000 indexing.py:2183(_ensure_iterable_column_indexer)
#        13    0.001    0.000    0.008    0.001 indexing.py:2200(_align_series)
#        26    0.000    0.000    0.000    0.000 indexing.py:2222(ravel)
#        13    0.000    0.000    0.000    0.000 indexing.py:2227(<listcomp>)
#        39    0.000    0.000    0.000    0.000 indexing.py:2244(<genexpr>)
#     54746    0.430    0.000    1.343    0.000 indexing.py:2362(__getitem__)
#     54746    0.134    0.000    0.192    0.000 indexing.py:2437(_convert_key)
#        16    0.000    0.000    0.000    0.000 indexing.py:2447(_tuplify)
#        16    0.000    0.000    0.000    0.000 indexing.py:2462(<listcomp>)
#       320    0.003    0.000    0.055    0.000 indexing.py:2476(check_bool_indexer)
#         8    0.000    0.000    0.000    0.000 indexing.py:2528(convert_missing_indexer)
#        14    0.000    0.000    0.000    0.000 indexing.py:2555(maybe_convert_ix)
#        58    0.000    0.000    0.000    0.000 indexing.py:2565(is_nested_tuple)
#       524    0.002    0.000    0.004    0.000 indexing.py:2582(is_label_like)
#        55    0.000    0.000    0.000    0.000 indexing.py:2596(need_slice)
#      4163    0.024    0.000    0.060    0.000 indexing.py:2609(check_dict_or_set_indexers)
#      2319    0.004    0.000    0.006    0.000 indexing.py:2616(<genexpr>)
#      2319    0.004    0.000    0.006    0.000 indexing.py:2625(<genexpr>)
#       184    0.000    0.000    0.000    0.000 indexing.py:287(loc)
#     54746    0.074    0.000    0.074    0.000 indexing.py:615(iat)
#        32    0.001    0.000    0.017    0.001 indexing.py:685(_get_setitem_indexer)
#        32    0.000    0.000    0.002    0.000 indexing.py:718(_maybe_mask_setitem_value)
#        32    0.000    0.000    0.002    0.000 indexing.py:777(_ensure_listlike_indexer)
#       257    0.006    0.000    0.258    0.001 indexing.py:831(__setitem__)
#       747    0.001    0.000    0.002    0.000 indexing.py:841(<genexpr>)
#       747    0.002    0.000    0.003    0.000 indexing.py:842(<genexpr>)
#       330    0.001    0.000    0.004    0.000 indexing.py:873(_expand_ellipsis)
#       990    0.001    0.000    0.001    0.000 indexing.py:879(<genexpr>)
#       270    0.002    0.000    0.026    0.000 indexing.py:895(_validate_tuple_indexer)
#       290    0.001    0.000    0.005    0.000 indexing.py:912(_is_nested_tuple_indexer)
#       870    0.002    0.000    0.002    0.000 indexing.py:919(<genexpr>)
#        32    0.000    0.000    0.014    0.000 indexing.py:923(_convert_tuple)
#        32    0.000    0.000    0.014    0.000 indexing.py:927(<listcomp>)
#       592    0.001    0.000    0.002    0.000 indexing.py:930(_validate_key_length)
#        78    0.001    0.000    0.129    0.002 indexing.py:942(_getitem_tuple_same_dim)
#       290    0.005    0.000    0.080    0.000 indexing.py:967(_getitem_lowerdim)
#      2258    0.006    0.000    0.014    0.000 inference.py:189(is_array_like)
#     70990    0.321    0.000    1.187    0.000 inference.py:267(is_dict_like)
#    218394    0.415    0.000    0.590    0.000 inference.py:294(<genexpr>)
#    194068    0.412    0.000    0.615    0.000 inference.py:328(is_hashable)
#       715    0.003    0.000    0.007    0.000 inference.py:367(is_sequence)
#         6    0.000    0.000    0.000    0.000 inference.py:398(is_dataclass)
#         1    0.000    0.000    0.000    0.000 inference.py:99(is_file_like)
#     59928    0.122    0.000    0.189    0.000 inspect.py:72(isclass)
#         6    0.000    0.000    0.000    0.000 invalid.py:11(invalid_comparison)
#       174    0.001    0.000    0.002    0.000 locale.py:384(normalize)
#       174    0.001    0.000    0.002    0.000 locale.py:467(_parse_localename)
#       174    0.001    0.000    0.004    0.000 locale.py:575(getlocale)
#       515    0.011    0.000    0.198    0.000 log_methods.py:86(log_in_color)
#      5531    0.121    0.000    0.704    0.000 managers.py:1004(_verify_integrity)
#     60158    0.178    0.000    0.292    0.000 managers.py:1006(<genexpr>)
#      5864    0.023    0.000    0.030    0.000 managers.py:1017(from_blocks)
#        67    0.003    0.000    0.017    0.000 managers.py:1027(fast_xs)
#        54    0.000    0.000    0.000    0.000 managers.py:1052(<listcomp>)
#     55850    0.710    0.000    1.136    0.000 managers.py:1084(iget)
#         9    0.000    0.000    0.000    0.000 managers.py:1098(iget_values)
#         2    0.000    0.000    0.000    0.000 managers.py:1110(column_arrays)
#       329    0.017    0.000    0.041    0.000 managers.py:1138(iset)
#       287    0.001    0.000    0.001    0.000 managers.py:1195(value_getitem)
#         8    0.000    0.000    0.001    0.000 managers.py:1281(_iset_split_block)
#        42    0.000    0.000    0.001    0.000 managers.py:1328(_iset_single)
#       307    0.005    0.000    0.087    0.000 managers.py:1355(column_setitem)
#        10    0.000    0.000    0.009    0.001 managers.py:1387(insert)
#        68    0.000    0.000    0.000    0.000 managers.py:1426(<genexpr>)
#        10    0.000    0.000    0.000    0.000 managers.py:1436(_insert_update_mgr_locs)
#        10    0.000    0.000    0.001    0.000 managers.py:1446(_insert_update_blklocs_and_blknos)
#     73119    0.099    0.000    0.411    0.000 managers.py:167(blknos)
#       242    0.003    0.000    0.081    0.000 managers.py:1677(as_array)
#       216    0.014    0.000    0.077    0.000 managers.py:1741(_interleave)
#       216    0.004    0.000    0.007    0.000 managers.py:1755(<listcomp>)
#      7431    0.024    0.000    0.200    0.000 managers.py:1805(is_consolidated)
#      7431    0.053    0.000    0.176    0.000 managers.py:1813(_consolidate_check)
#      6395    0.071    0.000    0.101    0.000 managers.py:1819(<listcomp>)
#      7431    0.050    0.000    3.084    0.000 managers.py:1823(_consolidate_inplace)
#     67344    0.076    0.000    0.076    0.000 managers.py:183(blklocs)
#     10913    0.011    0.000    0.011    0.000 managers.py:1838(ndim)
#    134509    0.204    0.000    0.204    0.000 managers.py:1847(__init__)
#     71149    0.399    0.000    0.658    0.000 managers.py:1860(from_blocks)
#      7443    0.051    0.000    0.442    0.000 managers.py:1873(from_array)
#     63103    0.069    0.000    0.069    0.000 managers.py:1944(_block)
#      1501    0.003    0.000    0.003    0.000 managers.py:2000(dtype)
#         9    0.000    0.000    0.000    0.000 managers.py:2007(external_values)
#    168233    0.325    0.000    0.393    0.000 managers.py:2011(internal_values)
#         6    0.000    0.000    0.000    0.000 managers.py:2028(setitem_inplace)
#        26    0.000    0.000    0.000    0.000 managers.py:2093(create_block_manager_from_blocks)
#     12744    0.130    0.000    7.914    0.001 managers.py:2119(create_block_manager_from_column_arrays)
#     72848    0.264    0.000    0.564    0.000 managers.py:2175(_grouping_func)
#     12744    0.614    0.000    4.688    0.000 managers.py:2191(_form_blocks)
#     30338    0.121    0.000    0.639    0.000 managers.py:223(set_axis)
#      5448    0.021    0.000    2.270    0.000 managers.py:2239(_tuples_to_blocks_no_consolidate)
#      5448    0.183    0.000    2.249    0.000 managers.py:2241(<listcomp>)
#     28421    0.261    0.000    0.381    0.000 managers.py:2249(_stack_arrays)
#      6381    0.133    0.000    2.614    0.000 managers.py:2262(_consolidate)
#     55050    0.101    0.000    0.731    0.000 managers.py:2267(<lambda>)
#     12948    0.263    0.000    1.580    0.000 managers.py:2279(_merge_blocks)
#     11583    0.025    0.000    0.036    0.000 managers.py:228(is_single_block)
#      9105    0.045    0.000    0.069    0.000 managers.py:2288(<listcomp>)
#      9105    0.014    0.000    0.014    0.000 managers.py:2297(<listcomp>)
#        10    0.000    0.000    0.000    0.000 managers.py:2314(_fast_count_smallints)
#        56    0.000    0.000    0.001    0.000 managers.py:2323(_preprocess_slice_or_indexer)
#     12280    0.014    0.000    0.014    0.000 managers.py:233(items)
#      5474    0.041    0.000    0.431    0.000 managers.py:276(get_dtypes)
#      5474    0.096    0.000    0.144    0.000 managers.py:277(<listcomp>)
#       152    0.000    0.000    0.001    0.000 managers.py:280(arrays)
#       152    0.000    0.000    0.000    0.000 managers.py:292(<listcomp>)
#     76775    1.363    0.000   11.296    0.000 managers.py:306(apply)
#     76775    0.103    0.000    0.103    0.000 managers.py:333(<dictcomp>)
#       321    0.003    0.000    0.040    0.000 managers.py:380(setitem)
#     59928    0.436    0.000   10.232    0.000 managers.py:442(astype)
#         1    0.000    0.000    0.001    0.001 managers.py:507(to_native_types)
#        10    0.000    0.000    0.000    0.000 managers.py:523(is_view)
#     16511    0.113    0.000    1.740    0.000 managers.py:620(copy)
#       219    0.001    0.000    0.006    0.000 managers.py:646(copy_func)
#       110    0.000    0.000    0.006    0.000 managers.py:649(<listcomp>)
#       238    0.004    0.000    0.127    0.001 managers.py:683(reindex_indexer)
#       184    0.003    0.000    0.098    0.001 managers.py:747(<listcomp>)
#        56    0.003    0.000    0.022    0.000 managers.py:768(_slice_take_blocks_ax0)
#       204    0.003    0.000    0.145    0.001 managers.py:929(take)
#     24262    0.050    0.000    0.754    0.000 managers.py:982(__init__)
#        20    0.000    0.000    0.001    0.000 merge.py:1036(_get_join_indexers)
#        20    0.000    0.000    0.004    0.000 merge.py:1042(_get_join_info)
#        20    0.001    0.000    0.084    0.004 merge.py:1137(_get_merge_keys)
#        60    0.000    0.000    0.000    0.000 merge.py:1163(<lambda>)
#        60    0.000    0.000    0.000    0.000 merge.py:1164(<lambda>)
#        20    0.001    0.000    0.004    0.000 merge.py:1278(_maybe_coerce_merge_keys)
#        20    0.000    0.000    0.183    0.009 merge.py:131(merge)
#        20    0.000    0.000    0.000    0.000 merge.py:1470(_validate_left_right_on)
#        20    0.000    0.000    0.001    0.000 merge.py:1619(get_join_indexers)
#        20    0.000    0.000    0.000    0.000 merge.py:2245(_get_empty_indexer)
#        60    0.000    0.000    0.000    0.000 merge.py:2557(_should_fill)
#        40    0.000    0.000    0.000    0.000 merge.py:2563(_any)
#        40    0.000    0.000    0.001    0.000 merge.py:2567(_validate_operand)
#        20    0.000    0.000    0.040    0.002 merge.py:2580(_items_overlap_with_suffix)
#       180    0.000    0.000    0.002    0.000 merge.py:2606(renamer)
#        20    0.001    0.000    0.089    0.004 merge.py:664(__init__)
#        20    0.001    0.000    0.083    0.004 merge.py:749(_reindex_and_concat)
#        20    0.001    0.000    0.094    0.005 merge.py:805(get_result)
#        20    0.000    0.000    0.000    0.000 merge.py:827(_maybe_drop_cross_column)
#        20    0.000    0.000    0.001    0.000 merge.py:886(_maybe_restore_index_levels)
#        20    0.001    0.000    0.005    0.000 merge.py:929(_maybe_add_join_keys)
#        80    0.000    0.000    0.001    0.000 merge.py:938(<genexpr>)
#    177811    0.433    0.000    4.458    0.000 missing.py:106(isna)
#      5522    0.009    0.000    0.009    0.000 missing.py:121(clean_fill_method)
#        49    0.000    0.000    0.000    0.000 missing.py:137(dispatch_fill_zeros)
#    177811    1.112    0.000    4.025    0.000 missing.py:189(_isna)
#     36416    0.203    0.000    0.656    0.000 missing.py:266(_isna_array)
#     36396    0.114    0.000    0.363    0.000 missing.py:307(_isna_string_dtype)
#        72    0.001    0.000    0.004    0.000 missing.py:352(notna)
#     22256    0.144    0.000    0.511    0.000 missing.py:455(array_equivalent)
#     21947    0.131    0.000    0.313    0.000 missing.py:553(_array_equivalent_object)
#      6777    0.051    0.000    0.563    0.000 missing.py:625(na_value_for_dtype)
#     13653    0.062    0.000    0.198    0.000 missing.py:679(is_valid_na_for_dtype)
#     36320    0.431    0.000    2.238    0.000 missing.py:730(isna_all)
#     36320    0.095    0.000    0.749    0.000 missing.py:755(<lambda>)
#     72640    0.227    0.000    1.456    0.000 missing.py:759(<genexpr>)
#      5522    0.016    0.000    0.025    0.000 missing.py:949(clean_reindex_fill_method)
#    135576    0.160    0.000    0.160    0.000 multiarray.py:1079(copyto)
#        20    0.000    0.000    0.000    0.000 multiarray.py:1130(putmask)
#     78327    0.101    0.000    0.101    0.000 multiarray.py:152(concatenate)
#         8    0.000    0.000    0.000    0.000 multiarray.py:420(lexsort)
#     20355    0.022    0.000    0.022    0.000 multiarray.py:668(result_type)
#        10    0.000    0.000    0.000    0.000 multiarray.py:891(bincount)
#         7    0.000    0.000    0.000    0.000 nanops.py:1500(_maybe_null_out)
#         7    0.000    0.000    0.000    0.000 nanops.py:198(_get_fill_value)
#         7    0.000    0.000    0.000    0.000 nanops.py:220(_maybe_get_mask)
#         7    0.000    0.000    0.001    0.000 nanops.py:264(_get_values)
#         7    0.000    0.000    0.000    0.000 nanops.py:353(_na_ok_dtype)
#         7    0.000    0.000    0.001    0.000 nanops.py:406(new_func)
#         7    0.000    0.000    0.001    0.000 nanops.py:472(newfunc)
#         7    0.000    0.000    0.001    0.000 nanops.py:609(nansum)
#        21    0.000    0.000    0.000    0.000 nanops.py:82(check)
#         7    0.000    0.000    0.002    0.000 nanops.py:86(_f)
#        28    0.000    0.000    0.000    0.000 nanops.py:89(<genexpr>)
#        20    0.000    0.000    0.000    0.000 numeric.py:1348(normalize_axis_tuple)
#        20    0.000    0.000    0.000    0.000 numeric.py:1398(<listcomp>)
#        10    0.000    0.000    0.000    0.000 numeric.py:1407(_moveaxis_dispatcher)
#        10    0.000    0.000    0.001    0.000 numeric.py:1411(moveaxis)
#        10    0.000    0.000    0.000    0.000 numeric.py:1473(<listcomp>)
#        30    0.000    0.000    0.001    0.000 numeric.py:150(ones)
#        26    0.000    0.000    0.000    0.000 numeric.py:2274(_isclose_dispatcher)
#        26    0.001    0.000    0.007    0.000 numeric.py:2278(isclose)
#        26    0.001    0.000    0.003    0.000 numeric.py:2359(within_tol)
#        33    0.000    0.000    0.000    0.000 numeric.py:2403(_array_equal_dispatcher)
#        33    0.000    0.000    0.001    0.000 numeric.py:2407(array_equal)
#    135546    0.931    0.000    2.723    0.000 numeric.py:290(full)
#     35592    0.091    0.000    0.135    0.000 numerictypes.py:282(issubclass_)
#     17796    0.094    0.000    0.246    0.000 numerictypes.py:356(issubdtype)
#        40    0.000    0.000    0.000    0.000 numpy_.py:128(dtype)
#        20    0.000    0.000    0.001    0.000 numpy_.py:204(isna)
#        20    0.000    0.000    0.001    0.000 numpy_.py:402(to_numpy)
#        20    0.000    0.000    0.000    0.000 numpy_.py:79(__init__)
#        20    0.000    0.000    0.001    0.000 numpy_.py:97(_from_sequence)
#         1    0.000    0.000    0.000    0.000 os.py:1073(__subclasshook__)
#         2    0.000    0.000    0.000    0.000 parse.py:110(_coerce_args)
#         1    0.000    0.000    0.000    0.000 parse.py:366(urlparse)
#         1    0.000    0.000    0.000    0.000 parse.py:399(_checknetloc)
#         1    0.000    0.000    0.000    0.000 parse.py:417(urlsplit)
#         2    0.000    0.000    0.000    0.000 parse.py:99(_noop)
#         1    0.000    0.000    0.000    0.000 pathlib.py:1038(__new__)
#         2    0.000    0.000    0.000    0.000 pathlib.py:1048(_init)
#         1    0.000    0.000    0.000    0.000 pathlib.py:1192(stat)
#         1    0.000    0.000    0.000    0.000 pathlib.py:1401(is_dir)
#         1    0.000    0.000    0.000    0.000 pathlib.py:292(splitroot)
#         1    0.000    0.000    0.000    0.000 pathlib.py:63(parse_parts)
#         1    0.000    0.000    0.000    0.000 pathlib.py:657(_parse_args)
#         1    0.000    0.000    0.000    0.000 pathlib.py:677(_from_parts)
#         1    0.000    0.000    0.000    0.000 pathlib.py:690(_from_parsed_parts)
#         1    0.000    0.000    0.000    0.000 pathlib.py:700(_format_parsed_parts)
#         1    0.000    0.000    0.000    0.000 pathlib.py:717(__str__)
#         1    0.000    0.000    0.000    0.000 pathlib.py:727(__fspath__)
#         1    0.000    0.000    0.000    0.000 pathlib.py:944(parent)
#       555    0.004    0.000    0.010    0.000 posixpath.py:117(splitext)
#       555    0.003    0.000    0.007    0.000 posixpath.py:140(basename)
#         3    0.000    0.000    0.000    0.000 posixpath.py:228(expanduser)
#       555    0.001    0.000    0.002    0.000 posixpath.py:41(_get_sep)
#       555    0.001    0.000    0.002    0.000 posixpath.py:52(normcase)
#       136    0.002    0.000    0.013    0.000 printing.py:119(<listcomp>)
#   676/268    0.006    0.000    0.182    0.001 printing.py:164(pprint_thing)
#       540    0.002    0.000    0.004    0.000 printing.py:195(as_escaped_string)
#        24    0.001    0.000    0.004    0.000 printing.py:27(adjoin)
#        24    0.000    0.000    0.001    0.000 printing.py:48(<listcomp>)
#       327    0.001    0.000    0.002    0.000 printing.py:62(justify)
#       111    0.000    0.000    0.001    0.000 printing.py:67(<listcomp>)
#       216    0.001    0.000    0.001    0.000 printing.py:71(<listcomp>)
#       136    0.003    0.000    0.168    0.001 printing.py:98(_pprint_seq)
#         1    0.000    0.000  117.460  117.460 profile:0(E.runForecast())
#         0    0.000             0.000          profile:0(profiler)
#       111    0.001    0.000    0.002    0.000 putmask.py:132(setitem_datetimelike_compat)
#        37    0.001    0.000    0.002    0.000 range.py:108(__new__)
#     14068    0.083    0.000    0.138    0.000 range.py:166(_simple_new)
#        37    0.000    0.000    0.000    0.000 range.py:181(_validate_dtype)
#      5492    0.006    0.000    0.006    0.000 range.py:196(_constructor)
#     10962    0.069    0.000    0.139    0.000 range.py:202(_data)
#         9    0.000    0.000    0.000    0.000 range.py:237(_format_with_header)
#         9    0.000    0.000    0.000    0.000 range.py:245(<listcomp>)
#     10962    0.012    0.000    0.012    0.000 range.py:249(start)
#     10973    0.012    0.000    0.012    0.000 range.py:257(stop)
#     10962    0.012    0.000    0.012    0.000 range.py:264(step)
#       342    0.001    0.000    0.001    0.000 range.py:308(dtype)
#        13    0.000    0.000    0.000    0.000 range.py:312(is_unique)
#        22    0.000    0.000    0.000    0.000 range.py:340(get_loc)
#        23    0.000    0.000    0.000    0.000 range.py:383(_should_fallback_to_positional)
#      1832    0.002    0.000    0.002    0.000 range.py:395(__iter__)
#       162    0.001    0.000    0.002    0.000 range.py:415(_view)
#        22    0.000    0.000    0.001    0.000 range.py:420(copy)
#       382    0.001    0.000    0.002    0.000 range.py:485(equals)
#      5505    0.172    0.000    2.394    0.000 range.py:831(_concat)
#     16519    0.029    0.000    0.040    0.000 range.py:840(<genexpr>)
#      5495    0.019    0.000    0.080    0.000 range.py:851(<listcomp>)
#       916    0.004    0.000    0.032    0.000 range.py:864(<listcomp>)
#      4542    0.018    0.000    0.157    0.000 range.py:875(<listcomp>)
#    205393    0.435    0.000    0.636    0.000 range.py:892(__len__)
#        44    0.000    0.000    0.002    0.000 range.py:902(__getitem__)
#        83    0.000    0.000    0.001    0.000 range.py:926(_getitem_slice)
#      9525    0.033    0.000    0.127    0.000 re.py:198(search)
#      9525    0.037    0.000    0.080    0.000 re.py:289(_compile)
#     56552    0.203    0.000    0.465    0.000 series.py:1099(_get_value)
#     55543    0.237    0.000    0.501    0.000 series.py:1314(_set_as_cached)
#     18344    0.019    0.000    0.019    0.000 series.py:1323(_clear_item_cache)
#         2    0.000    0.000    0.000    0.000 series.py:2131(unique)
#       460    0.007    0.000    0.218    0.000 series.py:3075(_construct_result)
#    128447    1.277    0.000    8.776    0.000 series.py:368(__init__)
#         7    0.000    0.000    0.002    0.000 series.py:4632(_reduce)
#      5448    0.039    0.000    1.704    0.000 series.py:4901(reindex)
#     60410    0.063    0.000    0.063    0.000 series.py:574(_constructor)
#      5448    0.023    0.000    0.023    0.000 series.py:578(_constructor_expanddim)
#      1501    0.003    0.000    0.006    0.000 series.py:594(dtype)
#       418    0.010    0.000    0.310    0.001 series.py:6086(_cmp_method)
#        32    0.000    0.000    0.023    0.001 series.py:6100(_logical_method)
#        10    0.000    0.000    0.007    0.001 series.py:6110(_arith_method)
#    248834    0.444    0.000    0.604    0.000 series.py:621(name)
#    133762    0.451    0.000    2.141    0.000 series.py:671(name)
#         9    0.000    0.000    0.000    0.000 series.py:676(values)
#    168233    0.388    0.000    0.780    0.000 series.py:718(_values)
#     54488    0.129    0.000    0.186    0.000 series.py:752(_references)
#       162    0.000    0.000    0.002    0.000 series.py:783(__len__)
#       237    0.001    0.000    0.003    0.000 series.py:869(__array__)
#        12    0.000    0.000    0.003    0.000 series.py:943(take)
#        12    0.000    0.000    0.003    0.000 series.py:962(_take_with_is_copy)
#       129    0.000    0.000    0.001    0.000 series.py:973(_ixs)
#      2030    0.022    0.000    0.099    0.000 series.py:992(__getitem__)
#      9105    0.020    0.000    0.030    0.000 shape_base.py:207(_arrays_for_stack_dispatcher)
#      9105    0.023    0.000    0.054    0.000 shape_base.py:218(_vhstack_dispatcher)
#      9105    0.074    0.000    0.438    0.000 shape_base.py:223(vstack)
#      9105    0.009    0.000    0.009    0.000 shape_base.py:77(_atleast_2d_dispatcher)
#      9105    0.086    0.000    0.148    0.000 shape_base.py:81(atleast_2d)
#         1    0.000    0.000    0.000    0.000 six.py:184(find_module)
#         1    0.000    0.000    0.000    0.000 sorting.py:109(get_group_index)
#         1    0.000    0.000    0.000    0.000 sorting.py:144(_int64_cut_off)
#         9    0.000    0.000    0.000    0.000 sorting.py:152(maybe_lift)
#         1    0.000    0.000    0.000    0.000 sorting.py:157(<listcomp>)
#         1    0.000    0.000    0.000    0.000 sre_compile.py:432(_generate_overlap_table)
#         3    0.000    0.000    0.000    0.000 sre_compile.py:453(_get_iscased)
#         2    0.000    0.000    0.000    0.000 sre_compile.py:461(_get_literal_prefix)
#         1    0.000    0.000    0.000    0.000 sre_compile.py:492(_get_charset_prefix)
#         2    0.000    0.000    0.000    0.000 sre_compile.py:536(_compile_info)
#         4    0.000    0.000    0.000    0.000 sre_compile.py:595(isstring)
#         2    0.000    0.000    0.001    0.000 sre_compile.py:598(_code)
#         2    0.000    0.000    0.000    0.000 sre_compile.py:71(_compile)
#         2    0.000    0.000    0.001    0.001 sre_compile.py:759(compile)
#         2    0.000    0.000    0.000    0.000 sre_parse.py:111(__init__)
#         2    0.000    0.000    0.000    0.000 sre_parse.py:160(__len__)
#        19    0.000    0.000    0.000    0.000 sre_parse.py:164(__getitem__)
#        19    0.000    0.000    0.000    0.000 sre_parse.py:172(append)
#         2    0.000    0.000    0.000    0.000 sre_parse.py:174(getwidth)
#         2    0.000    0.000    0.000    0.000 sre_parse.py:224(__init__)
#        21    0.000    0.000    0.000    0.000 sre_parse.py:233(__next)
#         2    0.000    0.000    0.000    0.000 sre_parse.py:249(match)
#        19    0.000    0.000    0.000    0.000 sre_parse.py:254(get)
#         2    0.000    0.000    0.000    0.000 sre_parse.py:286(tell)
#         2    0.000    0.000    0.001    0.000 sre_parse.py:435(_parse_sub)
#         2    0.000    0.000    0.001    0.000 sre_parse.py:493(_parse)
#         2    0.000    0.000    0.000    0.000 sre_parse.py:76(__init__)
#         4    0.000    0.000    0.000    0.000 sre_parse.py:81(groups)
#         2    0.000    0.000    0.000    0.000 sre_parse.py:921(fix_flags)
#         2    0.000    0.000    0.001    0.000 sre_parse.py:937(parse)
#        12    0.000    0.000    0.000    0.000 stride_tricks.py:25(_maybe_view_as_subclass)
#        12    0.000    0.000    0.000    0.000 stride_tricks.py:340(_broadcast_to)
#        24    0.000    0.000    0.000    0.000 stride_tricks.py:345(<genexpr>)
#        12    0.000    0.000    0.000    0.000 stride_tricks.py:363(_broadcast_to_dispatcher)
#        12    0.000    0.000    0.000    0.000 stride_tricks.py:367(broadcast_to)
#        80    0.000    0.000    0.000    0.000 string.py:23(__init__)
#        80    0.000    0.000    0.296    0.004 string.py:29(to_string)
#        12    0.000    0.000    0.112    0.009 string.py:35(_get_strcols)
#        80    0.000    0.000    0.295    0.004 string.py:41(_get_string_representation)
#        68    0.001    0.000    0.178    0.003 string.py:56(_empty_info_line)
#      7434    0.131    0.000    0.350    0.000 take.py:120(_take_nd_ndarray)
#         3    0.000    0.000    0.000    0.000 take.py:287(_get_take_nd_function_cached)
#      7434    0.018    0.000    0.018    0.000 take.py:325(_get_take_nd_function)
#         4    0.000    0.000    0.000    0.000 take.py:353(wrapper)
#      7434    0.029    0.000    0.120    0.000 take.py:564(_take_preprocess_indexer_and_fill_value)
#      7434    0.068    0.000    0.977    0.000 take.py:58(take_nd)
#       555    0.001    0.000    0.001    0.000 threading.py:1031(name)
#       555    0.001    0.000    0.002    0.000 threading.py:1306(current_thread)
#        12    0.000    0.000    0.000    0.000 twodim_base.py:236(_diag_dispatcher)
#        12    0.000    0.000    0.000    0.000 twodim_base.py:240(diag)
#      9520    0.022    0.000    0.032    0.000 types.py:171(__get__)
#    448712    0.469    0.000    0.469    0.000 typing.py:1149(cast)
#      5496    0.022    0.000    0.046    0.000 typing.py:255(inner)
#      5497    0.017    0.000    0.023    0.000 typing.py:720(__hash__)
#         2    0.000    0.000    0.000    0.000 typing.py:768(__instancecheck__)
#         2    0.000    0.000    0.000    0.000 typing.py:771(__subclasscheck__)
#         1    0.000    0.000    0.000    0.000 typing.py:868(__new__)
#       321    0.001    0.000    0.002    0.000 utils.py:125(check_setitem_lengths)
#       204    0.004    0.000    0.009    0.000 utils.py:241(maybe_convert_indices)
#       243    0.002    0.000    0.011    0.000 utils.py:292(length_of_indexer)
#       320    0.005    0.000    0.030    0.000 utils.py:421(check_array_indexer)
#     56272    0.113    0.000    0.217    0.000 utils.py:64(is_list_like_indexer)
#     10998    0.052    0.000    0.176    0.000 warnings.py:165(simplefilter)
#     10998    0.066    0.000    0.111    0.000 warnings.py:181(_add_filter)
#     10998    0.024    0.000    0.024    0.000 warnings.py:437(__init__)
#     10998    0.047    0.000    0.060    0.000 warnings.py:458(__enter__)
#     10998    0.032    0.000    0.043    0.000 warnings.py:477(__exit__)
#
#
# 2023-12-30 04:17:08.506821
    
    
    
    

    # A4 = AccountSet.AccountSet(checking() + cc(499, 501, 0.05, '20000102') + compound_loan_A_no_interest())
    # A4.to_excel('/Users/hume/Github/expense_forecast/A1.xlsx')

    # account_set = AccountSet.AccountSet([])
    #
    # account_set.addAccount(name='Checking',
    #                        balance=1000,
    #                        min_balance=0,
    #                        max_balance=float('Inf'),
    #                        account_type="checking")
    #
    # budget_set = BudgetSet.BudgetSet([])
    # budget_set.addBudgetItem('20000101', '20000101', 1, 'once', '1', 'Core', deferrable=False, partial_payment_allowed=False)
    #
    # account_milestone__list = []
    # memo_milestone__list = []
    # composite_milestone__list = []
    # milestone_names_for_composite_milestone = ['Account Milestone 1','Memo Milestone 1']
    #
    # account_milestone__list.append(AccountMilestone.AccountMilestone('Account Milestone 1','Checking',0,10000))
    # memo_milestone__list.append(MemoMilestone.MemoMilestone('Memo Milestone 1', '.*'))
    #
    # composite_milestone__list.append( CompositeMilestone.CompositeMilestone('composite milestone name 1',account_milestone__list,memo_milestone__list,milestone_names_for_composite_milestone) )
    #
    #
    #
    # MS = MilestoneSet.MilestoneSet(account_set,budget_set,account_milestone__list,memo_milestone__list,composite_milestone__list)

    # F = ForecastHandler.ForecastHandler()
    #
    # F.initialize_from_excel_file('expense_forecast__milestone_testing__input.ods')
    #
    # F.run_forecasts()

    #print(F.read_results_from_disk())



    # E1 = ExpenseForecast.initialize_from_json_file(path_to_json='Forecast__2023_04_07__14_06_02__031534.json')
    # E1.appendSummaryLines()
    #
    # E2 = ExpenseForecast.initialize_from_json_file(path_to_json='Forecast__2023_04_07__13_27_36__020658.json')
    # E2.appendSummaryLines()

    #print(E1.evaulateMemoMilestone('EMT class'))

    #F.generateCompareTwoForecastsHTMLReport(E1,E2)

    # core_budget_set = [['1']]
    #
    # CoreBudgetSet = BudgetSet.BudgetSet([])
    # CoreBudgetSet.addBudgetItem('20000101','20000101',1,'once','1','Core',deferrable=False,partial_payment_allowed=False)
    #
    # BudgetSetA2 = BudgetSet.BudgetSet([])
    # BudgetSetA2.addBudgetItem('20000101', '20000101', 1, 'once', '1', 'A2', deferrable=False, partial_payment_allowed=False)
    #
    # BudgetSetB2 = BudgetSet.BudgetSet([])
    # BudgetSetB2.addBudgetItem('20000101', '20000101', 1, 'once', '1', 'B2', deferrable=False, partial_payment_allowed=False)
    #
    # BudgetSetC3 = BudgetSet.BudgetSet([])
    # BudgetSetC3.addBudgetItem('20000101', '20000101', 1, 'once', '1', 'C3', deferrable=False, partial_payment_allowed=False)
    #
    # BudgetSetD3 = BudgetSet.BudgetSet([])
    # BudgetSetD3.addBudgetItem('20000101', '20000101', 1, 'once', '1', 'D3', deferrable=False, partial_payment_allowed=False)
    #
    # BudgetSetE3 = BudgetSet.BudgetSet([])
    # BudgetSetE3.addBudgetItem('20000101', '20000101', 1, 'once', '1', 'E3', deferrable=False, partial_payment_allowed=False)
    #
    # BudgetSetF4 = BudgetSet.BudgetSet([])
    # BudgetSetF4.addBudgetItem('20000101', '20000101', 1, 'once', '1', 'F4', deferrable=False, partial_payment_allowed=False)
    #
    # list_of_lists_of_budget_sets = [
    #     [ BudgetSetA2, BudgetSetB2 ],
    #     [ BudgetSetC3, BudgetSetD3, BudgetSetE3 ],
    #     [ BudgetSetF4 ]
    # ]
    #
    # F = ForecastHandler.ForecastHandler()
    #
    # account_set = AccountSet.AccountSet([])
    # memo_rule_set = MemoRuleSet.MemoRuleSet([])
    #
    # account_set.addAccount(name='Checking',
    #                        balance=1000,
    #                        min_balance=0,
    #                        max_balance=float('Inf'),
    #                        account_type="checking")
    #
    # memo_rule_set.addMemoRule(memo_regex='.*', account_from='Checking', account_to=None, transaction_priority=1)
    #
    # F.calculateMultipleChooseOne(account_set, CoreBudgetSet , memo_rule_set, '20000101', '20000103', list_of_lists_of_budget_sets)
#


# FAILED test_ForecastHandler.py::TestForecastHandlerMethods::test_ForecastHandler_Constructor - NotImplementedError
# FAILED test_ExpenseForecast.py::TestExpenseForecastMethods::test_dont_recompute_past_days_for_p2plus_transactions - NotImplementedError
# FAILED test_ExpenseForecast.py::TestExpenseForecastMethods::test_interest_types_and_cadences_at_most_monthly - NotImplementedError
# FAILED test_ExpenseForecast.py::TestExpenseForecastMethods::test_quarter_and_year_long_interest_cadences - NotImplementedError
# account milestone failed to evaluate, but the account name didnt exist in ExpenseForecast, so this should have been caught in the constructor for ExpenseForecast