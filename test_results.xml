<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="0" skipped="47" tests="195" time="52.221" timestamp="2024-11-07T18:06:35.630165-08:00" hostname="Hume-Dickies-MacBook-Pro.local"><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_AccountSet_doctests" time="0.001"><skipped type="pytest.skip" message="do I still need this?">/Users/hume/Github/expense_forecast/tests/account/unit/test_AccountSet__unit_test.py:93: do I still need this?</skipped></testcase><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_AccountSet_Constructor__invalid_inputs[accounts__list0-ValueError]" time="0.024" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_AccountSet_Constructor__invalid_inputs[accounts__list1-ValueError]" time="0.018" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_AccountSet_Constructor__invalid_inputs[accounts__list2-ValueError]" time="0.016" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_AccountSet_Constructor__invalid_inputs[accounts__list3-ValueError]" time="0.017" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_AccountSet_Constructor__invalid_inputs[accounts__list4-ValueError]" time="0.017" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_AccountSet_Constructor__invalid_inputs[accounts__list5-ValueError]" time="0.017" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_AccountSet_Constructor__invalid_inputs[accounts__list6-ValueError]" time="0.017" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_AccountSet_Constructor__invalid_inputs[accounts__list7-ValueError]" time="0.016" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_AccountSet_Constructor__invalid_inputs[accounts__list8-ValueError]" time="0.016" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_AccountSet_Constructor__invalid_inputs[accounts__list9-ValueError]" time="0.007" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_AccountSet_Constructor__invalid_inputs[accounts__list10-ValueError]" time="0.012" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_AccountSet_Constructor__invalid_inputs[accounts__list11-ValueError]" time="0.006" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_AccountSet_Constructor__invalid_inputs[accounts__list12-ValueError]" time="0.007" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_AccountSet_Constructor__invalid_inputs[accounts__list13-ValueError]" time="0.006" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_AccountSet_Constructor__invalid_inputs[accounts__list14-ValueError]" time="0.007" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_AccountSet_Constructor__valid_inputs[accounts__list0]" time="0.001" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_AccountSet_Constructor__valid_inputs[accounts__list1]" time="0.004" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_execute_transaction_valid_inputs[test checking-None-0.0-False-expected_result_vector0]" time="0.046" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_execute_transaction_valid_inputs[test checking-None-100.0-False-expected_result_vector1]" time="0.092" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_execute_transaction_valid_inputs[None-test checking-100.0-True-expected_result_vector2]" time="0.086" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_execute_transaction_valid_inputs[test credit-None-100.0-False-expected_result_vector3]" time="0.083" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_execute_transaction_valid_inputs[test checking-test credit-50.0-False-expected_result_vector4]" time="0.159" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_execute_transaction_valid_inputs[test checking-test credit-501.0-False-expected_result_vector5]" time="0.153" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_execute_transaction_valid_inputs[test checking-test loan-50.0-False-expected_result_vector6]" time="0.154" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_execute_transaction_valid_inputs[test checking-test loan-150.0-False-expected_result_vector7]" time="0.152" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_execute_transaction_valid_inputs[test checking-ALL_LOANS-150.0-False-expected_result_vector8]" time="0.634" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_createAccount__invalid_inputs[test loan-100-0-100-loan-20000101-compoung-0.1-monthly-50-None-None-100-ValueError]" time="0.002" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_createAccount__invalid_inputs[test loan-100-0-100-loan-20000101-compoung-0.1-monthly-50-None-100-None-ValueError]" time="0.002" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_createAccount__invalid_inputs[test credit-100-0-100-credit-20000101-compound-0.1-monthly-50-None-None-None-ValueError]" time="0.002" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_createAccount__invalid_inputs[test loan-100-0-100-loan-20000101-compoung-0.1-monthly-50-None-100-100-ValueError]" time="0.002" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_getAccounts" time="0.002" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_str" time="0.000"><skipped type="pytest.skip" message="this test needs to be improved">/Users/hume/Github/expense_forecast/tests/account/unit/test_AccountSet__unit_test.py:788: this test needs to be improved</skipped></testcase><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_determineMinPaymentAmount[NZ_20210_0111-100-400-100-300-200-400]" time="0.002" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_determineMinPaymentAmount[Z_02110_1001-0-200-100-100-100-300]" time="0.002" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_determineMinPaymentAmount[Z_42010_1110-200-300-100-300-0--1]" time="0.001" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_determineMinPaymentAmount[NZ_23100_1001-200-200-100-300-200--1]" time="0.001" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_determineMinPaymentAmount[NZ_11010_0100-200-100-100-200-200--1]" time="0.001" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_determineMinPaymentAmount[Z_41100_1111-300-100-200-400-0--1]" time="0.002" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_determineMinPaymentAmount[NZ_20200_0001-100-100-100-200-100--1]" time="0.001" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_determineMinPaymentAmount[NZ_10010_0001-100-100-100-200-100--1]" time="0.002" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_determineMinPaymentAmount[Z_03100_1011-0-200-100-300-100--1]" time="0.002" /><testcase classname="tests.account.unit.test_AccountSet__unit_test.TestAccountSet" name="test_determineMinPaymentAmount[NZ_01000_0010-100-100-100-200-200--1]" time="0.001" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_valid_inputs[checking-0-0-0-Checking-None-None-None-None-None-True-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_valid_inputs[cc: prev stmt bal-0-0-0-credit prev stmt bal-20000101-None-0.25-monthly-50-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_valid_inputs[cc: curr stmt bal-0-0-0-credit curr stmt bal-None-None-None-None-None-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_valid_inputs[loan simple daily: principal balance-0-0-0-principal balance-20000101-simple-0.25-daily-50-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_valid_inputs[loan compound monthly: principal balance-0-0-0-principal balance-20000101-compound-0.25-monthly-50-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_valid_inputs[loan: interest-0-0-0-interest-None-None-None-None-None-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[typo- invalid account type-0-0-0-shmecking-None-None-None-None-None-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[NoneType- no account type-0-0-0-None-None-None-None-None-None-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[context warning for account type- used credit type-0-0-0-credit-None-None-None-None-None-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[context warning for account type- used loan type-0-0-0-loan-None-None-None-None-None-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[name missing colon- prev stmt bal-0-0-0-prev stmt bal-20000101-compound-0-monthly-0-False-True-True]" time="0.003" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[name missing colon- prev stmt bal-0-0-0-principal balance-20000101-simple-0-daily-0-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[checking- bal not castable to numeric (None)-None-0-0-Checking-None-None-None-None-None-True-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[checking- bal not castable to numeric (pd.NA)-balance7-0-0-Checking-None-None-None-None-None-True-True-True]" time="0.003" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[checking- bal not castable to numeric (string)-X-0-0-Checking-None-None-None-None-None-True-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[checking- min bal not castable to numeric (None)-0-None-0-Checking-None-None-None-None-None-True-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[checking- min bal not castable to numeric (pd.NA)-0-min_balance10-0-Checking-None-None-None-None-None-True-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[checking- min bal not castable to numeric (string)-0-X-0-Checking-None-None-None-None-None-True-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[checking- max bal not castable to numeric (None)-0-0-None-Checking-None-None-None-None-None-True-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[checking- max bal not castable to numeric (pd.NA)-0-0-max_balance13-Checking-None-None-None-None-None-True-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[checking- max bal not castable to numeric (string)-0-0-X-Checking-None-None-None-None-None-True-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[checking- min gt max-0-10-0-Checking-None-None-None-None-None-True-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[checking- max lt 0-0--100--10-Checking-None-None-None-None-None-True-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[checking- billing_start_dt is not None-0-0-0-Checking-not None-None-None-None-None-True-True-True]" time="0.003" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[checking- interest_type is not None-0-0-0-Checking-None-not None-None-None-None-True-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[checking- apr is not None-0-0-0-Checking-None-None-not None-None-None-True-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[checking- interest_cadence is not None-0-0-0-Checking-None-None-None-not None-None-True-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[checking- min_payment is not None-0-0-0-Checking-None-None-None-None-not None-True-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[cc- billing_start_dt not castable to date YYYYMMDD: prev stmt bal -0-0-0-credit prev stmt bal-1234-compound-0.25-monthly-50-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[cc- apr is not castable to numeric (None): prev stmt bal -0-0-0-credit prev stmt bal-20000101-compound-None-monthly-50-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[cc- apr is not castable to numeric (pd.NA): prev stmt bal -0-0-0-credit prev stmt bal-20000101-compound-apr24-monthly-50-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[cc- apr is not castable to numeric (string): prev stmt bal -0-0-0-credit prev stmt bal-20000101-compound-X-monthly-50-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[cc- apr is lt 0: prev stmt bal -0-0-0-credit prev stmt bal-20000101-compound--0.25-monthly-50-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[cc- interest_cadence is not monthly: prev stmt bal -0-0-0-credit prev stmt bal-20000101-compound--0.25-daily-50-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[cc- min_payment is not castable to numeric (None): prev stmt bal -0-0-0-credit prev stmt bal-20000101-compound-0.25-monthly-None-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[cc- min_payment is not castable to numeric (pd.NA): prev stmt bal -0-0-0-credit prev stmt bal-20000101-compound-0.25-monthly-minimum_payment29-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[cc- min_payment is not castable to numeric (string): prev stmt bal -0-0-0-credit prev stmt bal-20000101-compound-0.25-monthly-X-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[cc- min_payment lt 0: prev stmt bal -0-0-0-credit prev stmt bal-20000101-compound-0.25-monthly--50-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[cc- billing_start_dt is not None: curr stmt bal -0-0-0-credit prev stmt bal-not None-compound-0.25-monthly-50-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[cc- interest_type is not None: curr stmt bal -0-0-0-credit prev stmt bal-None-compound-0.25-monthly-50-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[cc- apr is not None: curr stmt bal -0-0-0-credit prev stmt bal-None-None-0.25-monthly-50-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[cc- interest_cadence is not None: curr stmt bal -0-0-0-credit prev stmt bal-None-None-None-monthly-50-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[cc- min_payment is not None: curr stmt bal -0-0-0-credit prev stmt bal-None-None-None-None-50-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[loan- billing_start_dt not castable to date YYYYMMDD: principal balance -0-0-0-principal balance-1234-compound-0.25-monthly-50-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[loan- interest_type is not simple or compound: principal balance -0-0-0-principal balance-20000101-shmimple-0.25-monthly-50-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[loan- apr is not castable to numeric (None): principal balance -0-0-0-principal balance-20000101-compound-None-monthly-50-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[loan- apr is not castable to numeric (pd.NA): principal balance -0-0-0-principal balance-20000101-compound-apr40-monthly-50-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[loan- apr is not castable to numeric (string): principal balance -0-0-0-principal balance-20000101-compound-X-monthly-50-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[loan- apr is lt 0: principal balance -0-0-0-principal balance-20000101-compound--0.25-monthly-50-False-True-True]" time="0.003" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[loan- min_payment is not castable to numeric (None): principal balance -0-0-0-principal balance-20000101-compound-0.25-monthly-None-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[loan- min_payment is not castable to numeric (pd.NA): principal balance -0-0-0-principal balance-20000101-compound-0.25-monthly-minimum_payment44-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[loan- min_payment is not castable to numeric (string): principal balance -0-0-0-principal balance-20000101-compound-0.25-monthly-X-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[loan- min_payment lt 0: principal balance -0-0-0-principal balance-20000101-compound-0.25-monthly--50-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[loan- billing_start_dt is not None: interest -0-0-0-interest-not None-compound-0.25-monthly-50-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[loan- interest_type is not None: interest -0-0-0-interest-None-compound-0.25-monthly-50-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[loan- apr is not None: interest -0-0-0-interest-None-None-0.25-monthly-50-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[loan- interest_cadence is not None: interest -0-0-0-interest-None-None-None-monthly-50-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_Account_constructor_invalid_inputs[loan- min_payment is not None: interest -0-0-0-interest-None-None-None-None-50-False-True-True]" time="0.002" /><testcase classname="tests.account.unit.test_Account__unit_test.TestAccount" name="test_str" time="0.000"><skipped type="pytest.skip" message="this test sucks">/Users/hume/Github/expense_forecast/tests/account/unit/test_Account__unit_test.py:137: this test sucks</skipped></testcase><testcase classname="tests.budget_item.unit.test_BudgetItem__unit_test.TestBudgetItemMethods" name="test_BudgetItem_Constructor__valid_inputs[20000101-20000101-1-daily-10-test memo-False-False]" time="0.002" /><testcase classname="tests.budget_item.unit.test_BudgetItem__unit_test.TestBudgetItemMethods" name="test_BudgetItem_Constructor__invalid_inputs[X-20000101-1-daily-10-test memo-False-False]" time="0.002" /><testcase classname="tests.budget_item.unit.test_BudgetItem__unit_test.TestBudgetItemMethods" name="test_BudgetItem_Constructor__invalid_inputs[20000101-X-1-daily-10-test memo-False-False]" time="0.001" /><testcase classname="tests.budget_item.unit.test_BudgetItem__unit_test.TestBudgetItemMethods" name="test_BudgetItem_Constructor__invalid_inputs[20000101-20000101-X-daily-10-test memo-False-False]" time="0.002" /><testcase classname="tests.budget_item.unit.test_BudgetItem__unit_test.TestBudgetItemMethods" name="test_BudgetItem_Constructor__invalid_inputs[20000101-20000101-1-daily-X-test memo-False-False]" time="0.002" /><testcase classname="tests.budget_item.unit.test_BudgetItem__unit_test.TestBudgetItemMethods" name="test_BudgetItem_Constructor__invalid_inputs[20000101-20000101-0-daily-10-test memo-False-False]" time="0.002" /><testcase classname="tests.budget_item.unit.test_BudgetItem__unit_test.TestBudgetItemMethods" name="test_BudgetItem_Constructor__invalid_inputs[20000101-20000101-1-shmaily-10-test memo-False-False]" time="0.002" /><testcase classname="tests.budget_item.unit.test_BudgetItem__unit_test.TestBudgetItemMethods" name="test_BudgetItem_Constructor__invalid_inputs[20000101-20000101-2-daily-10-income-False-False]" time="0.002" /><testcase classname="tests.budget_item.unit.test_BudgetItem__unit_test.TestBudgetItemMethods" name="test_BudgetItem_Constructor__invalid_inputs[20000101-20000101-1-daily-10-test-True-False]" time="0.001" /><testcase classname="tests.budget_item.unit.test_BudgetItem__unit_test.TestBudgetItemMethods" name="test_BudgetItem_Constructor__invalid_inputs[20000101-20000101-1-daily-10-test-False-True]" time="0.001" /><testcase classname="tests.budget_item.unit.test_BudgetItem__unit_test.TestBudgetItemMethods" name="test_to_str" time="0.000"><skipped type="pytest.skip" message="this test needs to be improved">/Users/hume/Github/expense_forecast/tests/budget_item/unit/test_BudgetItem__unit_test.py:152: this test needs to be improved</skipped></testcase><testcase classname="tests.budget_item.unit.test_BudgetSet__unit_test.TestBudgetSetMethods" name="test_BudgetSet_Constructor[budget_items__list0]" time="0.002" /><testcase classname="tests.budget_item.unit.test_BudgetSet__unit_test.TestBudgetSetMethods" name="test_addBudgetItem[20000101-20000101-1-daily-10-test memo-False-False]" time="0.002" /><testcase classname="tests.budget_item.unit.test_BudgetSet__unit_test.TestBudgetSetMethods" name="test_getBudgetItems" time="0.003" /><testcase classname="tests.budget_item.unit.test_BudgetSet__unit_test.TestBudgetSetMethods" name="test_getBudgetSchedule" time="0.106" /><testcase classname="tests.budget_item.unit.test_BudgetSet__unit_test.TestBudgetSetMethods" name="test_str" time="0.010" /><testcase classname="tests.budget_item.unit.test_BudgetSet__unit_test.TestBudgetSetMethods" name="test_duplicate_budget_items_not_allowed" time="0.010" /><testcase classname="tests.budget_item.unit.test_BudgetSet__unit_test.TestBudgetSetMethods" name="test_illegal_cadence_in__generate_date_sequence__internal_method" time="0.001" /><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_ExpenseForecast_Constructor__valid_inputs[account_set0-budget_set0-memo_rule_set0-19991231-20000101-milestone_set0]" time="0.048" /><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_ExpenseForecast_Constructor__invalid_inputs[account_set0-budget_set0-memo_rule_set0-incorrect date format-20000103-milestone_set0-ValueError]" time="0.002" /><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_ExpenseForecast_Constructor__invalid_inputs[account_set1-budget_set1-memo_rule_set1-20000101-incorrect date format-milestone_set1-ValueError]" time="0.001" /><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_ExpenseForecast_Constructor__invalid_inputs[account_set2-budget_set2-memo_rule_set2-20000101-19991231-milestone_set2-ValueError]" time="0.002" /><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_ExpenseForecast_Constructor__invalid_inputs[account_set3-budget_set3-memo_rule_set3-19991231-20000101-milestone_set3-ValueError]" time="0.002" /><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_ExpenseForecast_Constructor__invalid_inputs[account_set4-budget_set4-memo_rule_set4-19991231-20000101-milestone_set4-ValueError]" time="0.015" /><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_ExpenseForecast_Constructor__invalid_inputs[account_set5-budget_set5-memo_rule_set5-19991231-20000101-milestone_set5-ValueError]" time="0.017" /><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_satisfice[test_p1_only_no_budget_items-account_set0-budget_set0-memo_rule_set0-20000101-20000103-milestone_set0-expected_result_df0]" time="0.001"><skipped type="pytest.skip" message="Skip so github action doesnt fail">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:369: Skip so github action doesnt fail</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_satisfice[test_p1_only__income_and_payment_on_same_day-account_set1-budget_set1-memo_rule_set1-20000101-20000103-milestone_set1-expected_result_df1]" time="0.000"><skipped type="pytest.skip" message="Skip so github action doesnt fail">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:369: Skip so github action doesnt fail</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_satisfice[test_p1_cc_txn_on_billing_date-account_set2-budget_set2-memo_rule_set2-20000101-20000103-milestone_set2-expected_result_df2]" time="0.001"><skipped type="pytest.skip" message="Skip so github action doesnt fail">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:369: Skip so github action doesnt fail</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_satisfice[test_cc_payment__satisfice__curr_bal_25__expect_0-account_set3-budget_set3-memo_rule_set3-20000101-20000103-milestone_set3-expected_result_df3]" time="0.000"><skipped type="pytest.skip" message="Skip so github action doesnt fail">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:369: Skip so github action doesnt fail</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_satisfice[test_cc_payment__satisfice__prev_bal_1000__expect_40-account_set4-budget_set4-memo_rule_set4-20000101-20000103-milestone_set4-expected_result_df4]" time="0.000"><skipped type="pytest.skip" message="Skip so github action doesnt fail">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:369: Skip so github action doesnt fail</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_satisfice[test_cc_payment__satisfice__prev_bal_3000__expect_60-account_set5-budget_set5-memo_rule_set5-20000101-20000103-milestone_set5-expected_result_df5]" time="0.001"><skipped type="pytest.skip" message="Skip so github action doesnt fail">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:369: Skip so github action doesnt fail</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_satisfice[test_cc_interest_accrued_reaches_0-account_set6-budget_set6-memo_rule_set6-20000110-20000214-milestone_set6-expected_result_df6]" time="0.000"><skipped type="pytest.skip" message="Skip so github action doesnt fail">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:369: Skip so github action doesnt fail</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_deferrals[test_p2_and_3__expect_defer-account_set0-budget_set0-memo_rule_set0-20000101-20000103-milestone_set0-expected_result_df0]" time="0.001"><skipped type="pytest.skip" message="Skip bc github action fails">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:587: Skip bc github action fails</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_deferrals[test_p2_and_3__p3_item_deferred_bc_p2-account_set1-budget_set1-memo_rule_set1-20000101-20000103-milestone_set1-expected_result_df1]" time="0.000"><skipped type="pytest.skip" message="Skip bc github action fails">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:587: Skip bc github action fails</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_deferrals[test_execute_defer_after_receiving_income_2_days_later-account_set2-budget_set2-memo_rule_set2-20000101-20000104-milestone_set2-expected_result_df2]" time="0.000"><skipped type="pytest.skip" message="Skip bc github action fails">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:587: Skip bc github action fails</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_priority_ordering[test_p2_and_3__expect_skip-account_set0-budget_set0-memo_rule_set0-20000101-20000103-milestone_set0-expected_result_df0]" time="2.212" /><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_priority_ordering[test_p2_and_3__p3_item_skipped_bc_p2-account_set1-budget_set1-memo_rule_set1-20000101-20000103-milestone_set1-expected_result_df1]" time="0.888" /><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_priority_ordering[test_p4__cc_payment__no_prev_balance__pay_100__no_funds__expect_skip-account_set2-budget_set2-memo_rule_set2-20000101-20000103-milestone_set2-expected_result_df2]" time="2.269" /><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_priority_ordering[test_p4__cc_payment__no_prev_balance__pay_100__expect_skip-account_set3-budget_set3-memo_rule_set3-20000101-20000103-milestone_set3-expected_result_df3]" time="2.264" /><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_priority_ordering[test_transactions_executed_at_p1_and_p2-account_set4-budget_set4-memo_rule_set4-20000101-20000106-milestone_set4-expected_result_df4]" time="2.377" /><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_priority_ordering[test_transactions_executed_at_p1_and_p2_and_p3-account_set5-budget_set5-memo_rule_set5-20000101-20000106-milestone_set5-expected_result_df5]" time="5.279" /><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_cc_payment_amount[test_p4__cc_payment__pay_all_of_prev_part_of_curr__expect_800-account_set0-budget_set0-memo_rule_set0-20000101-20000103-milestone_set0-expected_result_df0]" time="2.721" /><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_cc_payment_amount[test_p4__cc_payment__pay_part_of_prev_balance__expect_200-account_set1-budget_set1-memo_rule_set1-20000101-20000103-milestone_set1-expected_result_df1]" time="2.592" /><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_cc_payment_amount[test_p4__cc_payment__non_0_prev_balance_but_no_funds__expect_0-account_set2-budget_set2-memo_rule_set2-20000101-20000103-milestone_set2-expected_result_df2]" time="2.189" /><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_cc_payment_amount[test_p4__cc_payment__partial_of_indicated_amount-account_set3-budget_set3-memo_rule_set3-20000101-20000103-milestone_set3-expected_result_df3]" time="3.619" /><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_cc_payment_amount[test_execute_at_reduced_amount_bc_later_higher_priority_txn-account_set4-budget_set4-memo_rule_set4-20000101-20000105-milestone_set4-expected_result_df4]" time="1.463" /><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_cc_advance_payment[test_cc_advance_minimum_payment_in_1_payment_pay_over_minimum-account_set0-budget_set0-memo_rule_set0-20000110-20000113-milestone_set0-expected_result_df0]" time="0.000"><skipped type="pytest.skip" message="Skipping this test bc github action">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:1215: Skipping this test bc github action</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_cc_advance_payment[test_cc_advance_minimum_payment_in_1_payment_pay_under_minimum-account_set1-budget_set1-memo_rule_set1-20000110-20000113-milestone_set1-expected_result_df1]" time="0.000"><skipped type="pytest.skip" message="Skipping this test bc github action">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:1215: Skipping this test bc github action</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_cc_advance_payment[test_cc_advance_minimum_payment_in_1_payment_pay_exact_minimum-account_set2-budget_set2-memo_rule_set2-20000110-20000113-milestone_set2-expected_result_df2]" time="0.000"><skipped type="pytest.skip" message="Skipping this test bc github action">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:1215: Skipping this test bc github action</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_cc_advance_payment[test_cc_single_additional_payment_on_due_date-account_set3-budget_set3-memo_rule_set3-20000111-20000113-milestone_set3-expected_result_df3]" time="0.000"><skipped type="pytest.skip" message="Skipping this test bc github action">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:1215: Skipping this test bc github action</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_cc_advance_payment[test_eopc_bal_500eocp_0prev_0curr-account_set4-budget_set4-memo_rule_set4-20000110-20000214-milestone_set4-expected_result_df4]" time="0.000"><skipped type="pytest.skip" message="Skipping this test bc github action">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:1215: Skipping this test bc github action</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_cc_advance_payment[test_cc_two_additional_payments_on_due_date__prev_only-account_set5-budget_set5-memo_rule_set5-20000111-20000113-milestone_set5-expected_result_df5]" time="0.000"><skipped type="pytest.skip" message="Skipping this test bc github action">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:1215: Skipping this test bc github action</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_cc_advance_payment[test_cc_single_additional_payment_on_due_date_OVERPAY-account_set6-budget_set6-memo_rule_set6-20000111-20000113-milestone_set6-expected_result_df6]" time="0.000"><skipped type="pytest.skip" message="Skipping this test bc github action">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:1215: Skipping this test bc github action</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_cc_advance_payment[test_cc_two_additional_payments_on_due_date__curr_only-account_set7-budget_set7-memo_rule_set7-20000111-20000113-milestone_set7-expected_result_df7]" time="0.001"><skipped type="pytest.skip" message="Skipping this test bc github action">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:1215: Skipping this test bc github action</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_cc_advance_payment[test_cc_two_additional_payments_on_due_date_OVERPAY-account_set8-budget_set8-memo_rule_set8-20000111-20000113-milestone_set8-expected_result_df8]" time="0.000"><skipped type="pytest.skip" message="Skipping this test bc github action">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:1215: Skipping this test bc github action</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_cc_advance_payment[test_cc_single_additional_payment_day_before__prev_only-account_set9-budget_set9-memo_rule_set9-20000110-20000113-milestone_set9-expected_result_df9]" time="0.001"><skipped type="pytest.skip" message="Skipping this test bc github action">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:1215: Skipping this test bc github action</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_cc_advance_payment[test_cc_two_additional_payments_day_before__prev_only-account_set10-budget_set10-memo_rule_set10-20000110-20000113-milestone_set10-expected_result_df10]" time="0.000"><skipped type="pytest.skip" message="Skipping this test bc github action">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:1215: Skipping this test bc github action</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_cc_advance_payment[test_cc_single_additional_payment_day_before_OVERPAY__prev_only-account_set11-budget_set11-memo_rule_set11-20000110-20000113-milestone_set11-expected_result_df11]" time="0.000"><skipped type="pytest.skip" message="Skipping this test bc github action">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:1215: Skipping this test bc github action</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_cc_advance_payment[test_cc_two_additional_payments_day_before_OVERPAY__prev_only-account_set12-budget_set12-memo_rule_set12-20000110-20000113-milestone_set12-expected_result_df12]" time="0.000"><skipped type="pytest.skip" message="Skipping this test bc github action">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:1215: Skipping this test bc github action</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_cc_advance_payment[test_cc_single_additional_payment_day_before__curr_only-account_set13-budget_set13-memo_rule_set13-20000110-20000113-milestone_set13-expected_result_df13]" time="0.000"><skipped type="pytest.skip" message="Skipping this test bc github action">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:1215: Skipping this test bc github action</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_cc_advance_payment[test_cc_two_additional_payments_day_before__curr_only-account_set14-budget_set14-memo_rule_set14-20000110-20000113-milestone_set14-expected_result_df14]" time="0.000"><skipped type="pytest.skip" message="Skipping this test bc github action">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:1215: Skipping this test bc github action</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_cc_advance_payment[test_cc_single_additional_payment_day_before_OVERPAY__curr_only-account_set15-budget_set15-memo_rule_set15-20000110-20000113-milestone_set15-expected_result_df15]" time="0.000"><skipped type="pytest.skip" message="Skipping this test bc github action">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:1215: Skipping this test bc github action</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_cc_advance_payment[test_cc_two_additional_payments_day_before_OVERPAY__curr_only-account_set16-budget_set16-memo_rule_set16-20000110-20000113-milestone_set16-expected_result_df16]" time="0.000"><skipped type="pytest.skip" message="Skipping this test bc github action">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:1215: Skipping this test bc github action</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_cc_advance_payment[test_cc_single_additional_payment_day_before__curr_prev-account_set17-budget_set17-memo_rule_set17-20000110-20000113-milestone_set17-expected_result_df17]" time="0.000"><skipped type="pytest.skip" message="Skipping this test bc github action">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:1215: Skipping this test bc github action</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_cc_advance_payment[test_cc_single_additional_payment_day_before_OVERPAY__curr_prev-account_set18-budget_set18-memo_rule_set18-20000110-20000113-milestone_set18-expected_result_df18]" time="0.000"><skipped type="pytest.skip" message="Skipping this test bc github action">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:1215: Skipping this test bc github action</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_cc_payment_propagation[test_distal_propagation__prev_only-account_set0-budget_set0-memo_rule_set0-20000110-20000214-milestone_set0-expected_result_df0]" time="0.000"><skipped type="pytest.skip" message="Skipping this test for now">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:1908: Skipping this test for now</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_cc_payment_propagation[test_distal_propagation_multiple__prev_only-account_set1-budget_set1-memo_rule_set1-20000110-20000214-milestone_set1-expected_result_df1]" time="0.000"><skipped type="pytest.skip" message="Skipping this test for now">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:1908: Skipping this test for now</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_cc_payment_propagation[test_distal_propagation__curr_only-account_set2-budget_set2-memo_rule_set2-20000110-20000214-milestone_set2-expected_result_df2]" time="0.001"><skipped type="pytest.skip" message="Skipping this test for now">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:1908: Skipping this test for now</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_cc_payment_propagation[test_distal_propagation_multiple__curr_only-account_set3-budget_set3-memo_rule_set3-20000110-20000214-milestone_set3-expected_result_df3]" time="0.000"><skipped type="pytest.skip" message="Skipping this test for now">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:1908: Skipping this test for now</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_cc_payment_propagation[test_distal_propagation__curr_prev-account_set4-budget_set4-memo_rule_set4-20000110-20000214-milestone_set4-expected_result_df4]" time="0.000"><skipped type="pytest.skip" message="Skipping this test for now">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:1908: Skipping this test for now</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_cc_payment_propagation[test_distal_propagation_multiple__curr_prev-account_set5-budget_set5-memo_rule_set5-20000110-20000214-milestone_set5-expected_result_df5]" time="0.000"><skipped type="pytest.skip" message="Skipping this test for now">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:1908: Skipping this test for now</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_loan_payments[test_p7__additional_loan_payment__amt_10-account_set0-budget_set0-memo_rule_set0-20000101-20000103-milestone_set0-expected_result_df0]" time="0.000"><skipped type="pytest.skip" message="Skipping this test for now">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:2120: Skipping this test for now</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_loan_payments[test_p7__additional_loan_payment__amt_110-account_set1-budget_set1-memo_rule_set1-20000101-20000103-milestone_set1-expected_result_df1]" time="0.000"><skipped type="pytest.skip" message="Skipping this test for now">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:2120: Skipping this test for now</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_loan_payments[test_p7__additional_loan_payment__amt_560-account_set2-budget_set2-memo_rule_set2-20000101-20000103-milestone_set2-expected_result_df2]" time="0.000"><skipped type="pytest.skip" message="Skipping this test for now">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:2120: Skipping this test for now</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_loan_payments[test_p7__additional_loan_payment__amt_610-account_set3-budget_set3-memo_rule_set3-20000101-20000103-milestone_set3-expected_result_df3]" time="0.001"><skipped type="pytest.skip" message="Skipping this test for now">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:2120: Skipping this test for now</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_loan_payments[test_p7__additional_loan_payment__amt_1900-account_set4-budget_set4-memo_rule_set4-20000101-20000103-milestone_set4-expected_result_df4]" time="0.000"><skipped type="pytest.skip" message="Skipping this test for now">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:2120: Skipping this test for now</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_loan_payments[test_p7__additional_loan_payment__amt_overpay-account_set5-budget_set5-memo_rule_set5-20000101-20000103-milestone_set5-expected_result_df5]" time="0.000"><skipped type="pytest.skip" message="Skipping this test for now">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:2120: Skipping this test for now</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_TEMPLATE[test_description0-account_set0-budget_set0-memo_rule_set0-start_date_YYYYMMDD0-end_date_YYYYMMDD0-milestone_set0-expected_result_df0]" time="0.000"><skipped type="pytest.skip" message="got empty parameter set ['test_description', 'account_set', 'budget_set', 'memo_rule_set', 'start_date_YYYYMMDD', 'end_date_YYYYMMDD', 'milestone_set', 'expected_result_df'], function test_TEMPLATE at /Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:2409">/Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:2410: got empty parameter set ['test_description', 'account_set', 'budget_set', 'memo_rule_set', 'start_date_YYYYMMDD', 'end_date_YYYYMMDD', 'milestone_set', 'expected_result_df'], function test_TEMPLATE at /Users/hume/Github/expense_forecast/tests/forecast/unit/test_ExpenseForecast__unit_test.py:2409</skipped></testcase><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_next_income_date[test_next_income_date-account_set0-budget_set0-memo_rule_set0-20000101-20000105-milestone_set0-expected_result_df0]" time="0.422" /><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_multiple_matching_memo_rule_regex" time="0.047" /><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_str" time="1.218" /><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_forecast_longer_than_satisfice" time="0.039" /><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_evaluate_account_milestone[test_account_milestone-account_set0-budget_set0-memo_rule_set0-20000101-20000103-milestone_set0-account_milestone_names0-expected_milestone_dates0]" time="1.011" /><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_evaluate_memo_milestone[test_memo_milestone-account_set0-budget_set0-memo_rule_set0-20000101-20000103-milestone_set0-memo_milestone_names0-expected_milestone_dates0]" time="1.048" /><testcase classname="tests.forecast.unit.test_ExpenseForecast__unit_test.TestExpenseForecastMethods" name="test_evaluate_composite_milestone[test composite milestone-account_set0-budget_set0-memo_rule_set0-20000101-20000103-milestone_set0-composite_milestone_names0-expected_milestone_dates0]" time="1.139" /><testcase classname="tests.milestone.unit.test_AccountMilestone__unit_test.TestAccountMilestoneMethods" name="test_AccountMilestone_constructor__valid_inputs" time="0.001" /><testcase classname="tests.milestone.unit.test_AccountMilestone__unit_test.TestAccountMilestoneMethods" name="test_AccountMilestone_constructor__invalid_inputs" time="0.001" /><testcase classname="tests.milestone.unit.test_AccountMilestone__unit_test.TestAccountMilestoneMethods" name="test_str" time="0.003" /><testcase classname="tests.milestone.unit.test_CompositeMilestone__unit_test.TestCompositeMilestoneMethods" name="test_CompositeMilestone_constructor__valid_inputs" time="0.002" /><testcase classname="tests.milestone.unit.test_CompositeMilestone__unit_test.TestCompositeMilestoneMethods" name="test_CompositeMilestone_constructor__invalid_inputs" time="0.000"><skipped type="pytest.skip" message="implement">/Users/hume/Github/expense_forecast/tests/milestone/unit/test_CompositeMilestone__unit_test.py:19: implement</skipped></testcase><testcase classname="tests.milestone.unit.test_CompositeMilestone__unit_test.TestCompositeMilestoneMethods" name="test_str" time="0.011" /><testcase classname="tests.milestone.unit.test_MemoMilestone__unit_test.TestMemoMilestoneMethods" name="test_MemoMilestone_constructor" time="0.002" /><testcase classname="tests.milestone.unit.test_MemoMilestone__unit_test.TestMemoMilestoneMethods" name="test_str" time="0.002" /></testsuite></testsuites>