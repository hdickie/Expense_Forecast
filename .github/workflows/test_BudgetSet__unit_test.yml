
    # This workflow will install Python dependencies, run tests and lint with a single version of Python
    # For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python
    
    name: UNIT - BudgetSet
    
    on:
      pull_request:
        branches: [ "prod" ]
        paths:
          - '**/*BudgetSet*.py'
      workflow_dispatch:
    
    permissions:
      contents: read
    
    jobs:
      build:
        runs-on: ubuntu-latest
        steps:
        - uses: actions/checkout@v4
        - name: Set up Python 3.10
          uses: actions/setup-python@v3
          with:
            python-version: "3.10"
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install flake8 pytest junitparser
            if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        - name: Test with pytest
          run: |
            coverage run -m pytest -k test_BudgetSet__unit_test --junitxml=test_BudgetSet__unit_test.xml
        - name: "Combine"
          run: |
            export TOTAL_TEST_COUNT=$(python -c "from junitparser import JUnitXml;xml = JUnitXml.fromfile('test_BudgetSet__unit_test.xml');count_all_tests = len([case for suite in xml for case in suite if case.result]);print(count_all_tests)")
            echo "### Total Count Tests: ${TOTAL_TEST_COUNT}" >> $GITHUB_STEP_SUMMARY
            export COUNT_SKIPPED_TESTS=$(python -c "from junitparser import JUnitXml;xml = JUnitXml.fromfile('test_BudgetSet__unit_test.xml');count_skipped_tests = len([case for suite in xml for case in suite if case.result and case.result[0].type == 'pytest.skip']);print(count_skipped_tests)")
            echo "### Total Count Skipped Tests: ${COUNT_SKIPPED_TESTS}" >> $GITHUB_STEP_SUMMARY
    
            if [[ $TOTAL_TEST_COUNT -ne 0 && $COUNT_FAILED_TESTS -eq 0 && $COUNT_SKIPPED_TESTS -eq 0 ]]; then
              export SKIP_BADGE_MESSAGE='PASS'
              export COLOR='green'
            elif [[ $TOTAL_TEST_COUNT -ne 0 && $COUNT_FAILED_TESTS -eq 0 && $COUNT_SKIPPED_TESTS -ne 0 ]]; then
              export SKIP_BADGE_MESSAGE='SKIP'
              export COLOR='yellow'
            fi
            echo "skip_message=$SKIP_BADGE_MESSAGE" >> $GITHUB_ENV
            echo "### skip_message: ${SKIP_BADGE_MESSAGE}" >> $GITHUB_STEP_SUMMARY
            echo "color=$COLOR" >> $GITHUB_ENV
            echo "### color: ${COLOR}" >> $GITHUB_STEP_SUMMARY
            export SKIP_TOTAL_MESSAGE=$(($TOTAL_TEST_COUNT - $COUNT_SKIPPED_TESTS))"/"$TOTAL_TEST_COUNT
            echo "skip_total_message=$SKIP_TOTAL_MESSAGE" >> $GITHUB_ENV
            echo "### skip_total_message: ${SKIP_TOTAL_MESSAGE}" >> $GITHUB_STEP_SUMMARY
        - name: "Make Skip or Pass Badge"
          uses: schneegans/dynamic-badges-action@v1.4.0
          with:
            # GIST_TOKEN is a GitHub personal access token with scope "gist".
            auth: ${{ secrets.GIST_TOKEN }}
            gistID: 69631cca73647a817c2678cf0250a54a   # replace with your real Gist id.
            filename: test_BudgetSet__unit_test__test_result.json
            label: UNIT - BudgetSet - Test Status
            message: ${{ env.skip_message }}
            color: ${{ env.color }}
        - name: "Make Pass/Total Ratio Badge"
          uses: schneegans/dynamic-badges-action@v1.4.0
          with:
            # GIST_TOKEN is a GitHub personal access token with scope "gist".
            auth: ${{ secrets.GIST_TOKEN }}
            gistID: 69631cca73647a817c2678cf0250a54a   # replace with your real Gist id.
            filename: test_BudgetSet__unit_test__pass_total_ratio.json
            label: UNIT - BudgetSet - Pass Count
            message: ${{ env.skip_total_message }}
            color: ${{ env.color }}
        
